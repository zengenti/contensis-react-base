import { StateType } from "../../config";
import { AppState } from "../../redux/appstate";
export declare const selectRouteEntry: (state: AppState, returnType?: StateType | undefined) => any;
export declare const selectMappedEntry: (state: AppState, returnType?: StateType | undefined) => any;
export declare const selectSurrogateKeys: (state: AppState) => any;
export declare const selectCurrentHostname: (state: AppState) => any;
export declare const selectCurrentTreeID: (state: AppState) => any;
export declare const selectRouteEntryEntryId: (state: AppState) => any;
export declare const selectRouteEntryContentTypeId: (state: AppState) => any;
export declare const selectRouteEntryLanguage: (state: AppState) => any;
export declare const selectRouteEntrySlug: (state: AppState) => any;
export declare const selectRouteEntryID: (state: AppState) => any;
export declare const selectCurrentPath: (state: AppState) => any;
export declare const selectCurrentLocation: (state: AppState) => any;
export declare const selectCurrentSearch: (state: AppState) => any;
export declare const selectCurrentHash: (state: AppState) => any;
export declare const selectQueryStringAsObject: (state: AppState) => any;
export declare const selectCurrentProject: (state: AppState) => any;
export declare const selectIsNotFound: (state: AppState) => any;
export declare const selectCurrentAncestors: (state: AppState) => any;
export declare const selectCurrentSiblings: (state: AppState) => any;
export declare const selectCurrentNode: (state: AppState, returnType?: StateType | undefined) => any;
export declare const selectCurrentChildren: (state: any) => any;
export declare const selectBreadcrumb: (state: AppState) => any;
export declare const selectRouteErrorMessage: (state: AppState) => any;
export declare const selectRouteIsError: (state: AppState) => any;
export declare const selectRouteLoading: (state: AppState) => any;
export declare const selectRouteStatusCode: (state: AppState) => any;
export declare const selectStaticRoute: (state: AppState) => any;

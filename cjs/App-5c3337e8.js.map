{"version":3,"file":"App-5c3337e8.js","sources":["../src/redux/store/history.js","../src/redux/sagas/navigation.js","../src/util/schema.ts","../src/routing/util/expressions.ts","../src/routing/util/queries.ts","../src/routing/redux/sagas.js","../src/user/redux/sagas/register.js","../src/user/util/userHelper.js","../src/user/redux/sagas/resetPassword.js","../src/user/redux/sagas/index.js","../src/redux/sagas/index.js","../src/util/pickProject.js","../src/app/App.tsx"],"sourcesContent":["import { createBrowserHistory, createMemoryHistory } from 'history';\r\n\r\n// Create a history depending on the environment\r\nconst selectedHistory =\r\n  typeof window !== 'undefined' ? createBrowserHistory : createMemoryHistory;\r\n\r\nexport const history = (options = {}) => selectedHistory(options);\r\nexport const browserHistory = selectedHistory();\r\n","import { takeEvery, put, select } from 'redux-saga/effects';\r\nimport * as log from 'loglevel';\r\n\r\nimport { deliveryApi } from '~/util/ContensisDeliveryApi';\r\nimport {\r\n  GET_NODE_TREE,\r\n  SET_NODE_TREE,\r\n  GET_NODE_TREE_ERROR,\r\n} from '~/redux/types/navigation';\r\nimport { hasNavigationTree } from '~/redux/selectors/navigation';\r\nimport { selectVersionStatus } from '~/redux/selectors/version';\r\nimport { selectCurrentProject } from '~/routing/redux/selectors';\r\n\r\nexport const navigationSagas = [takeEvery(GET_NODE_TREE, ensureNodeTreeSaga)];\r\n\r\nexport function* ensureNodeTreeSaga(action) {\r\n  const state = yield select();\r\n  try {\r\n    if (!hasNavigationTree(state)) {\r\n      const deliveryApiVersionStatus = yield select(selectVersionStatus);\r\n      const project = yield select(selectCurrentProject);\r\n      const nodes = yield deliveryApi\r\n        .getClient(deliveryApiVersionStatus, project)\r\n        .nodes.getRoot({\r\n          depth: action.treeDepth || 0,\r\n          language: action.language,\r\n        });\r\n      if (nodes) {\r\n        yield put({ type: SET_NODE_TREE, nodes });\r\n      } else {\r\n        yield put({ type: GET_NODE_TREE_ERROR });\r\n      }\r\n    }\r\n  } catch (ex) {\r\n    log.error(...['Error running ensureNodeTreeSaga:', ex]);\r\n    yield put({ type: GET_NODE_TREE_ERROR, error: ex.toString() });\r\n  }\r\n}\r\n","export const DataFormats = {\r\n  entry: 'entry',\r\n  webpage: 'webpage',\r\n};\r\n\r\nconst sys = {\r\n  contentTypeId: 'sys.contentTypeId',\r\n  dataFormat: 'sys.dataFormat',\r\n  filename: 'sys.properties.filename',\r\n  id: 'sys.id',\r\n  includeInSearch: 'sys.metadata.includeInSearch',\r\n  slug: 'sys.slug',\r\n  uri: 'sys.uri',\r\n  versionStatus: 'sys.versionStatus',\r\n};\r\n\r\nexport const Fields = {\r\n  entryTitle: 'entryTitle',\r\n  entryDescription: 'entryDescription',\r\n  keywords: 'keywords',\r\n  sys,\r\n  contentTypeId: 'sys.contentTypeId',\r\n  wildcard: '*',\r\n};\r\n\r\nexport const VersionStatus = {\r\n  published: 'published',\r\n  latest: 'latest',\r\n};\r\n","import { IExpression } from 'contensis-core-api';\r\nimport { Op } from 'contensis-delivery-api';\r\nimport { Fields } from '~/util/schema';\r\n\r\nexport const fieldExpression = (\r\n  field: string,\r\n  value: string | string[],\r\n  operator = 'equalTo',\r\n  weight = null\r\n) => {\r\n  if (!field || !value) return [];\r\n  if (Array.isArray(value)) return equalToOrIn(field, value, operator);\r\n  else\r\n    return !weight\r\n      ? [Op[operator](field, value)]\r\n      : [Op[operator](field, value).weight(weight)];\r\n};\r\n\r\nexport const defaultExpressions = (\r\n  versionStatus: 'published' | 'latest'\r\n): IExpression[] => {\r\n  return [Op.equalTo(Fields.sys.versionStatus, versionStatus)];\r\n};\r\n\r\nconst equalToOrIn = (field: string, arr: string[], operator = 'equalTo') =>\r\n  arr.length === 0\r\n    ? []\r\n    : arr.length === 1\r\n    ? [Op[operator](field, arr[0])]\r\n    : [Op.in(field, ...arr)];\r\n","import { VersionStatus } from 'contensis-core-api';\r\nimport { Query } from 'contensis-delivery-api';\r\nimport { fieldExpression, defaultExpressions } from './expressions';\r\n\r\nexport const routeEntryByFieldsQuery = (\r\n  id: string,\r\n  language = 'en-GB',\r\n  fields: string[] = [],\r\n  versionStatus: VersionStatus = 'published'\r\n) => {\r\n  const query = new Query(\r\n    ...[\r\n      ...fieldExpression('sys.id', id),\r\n      ...fieldExpression('sys.language', language),\r\n      ...defaultExpressions(versionStatus),\r\n    ]\r\n  );\r\n  query.fields = fields;\r\n  return query;\r\n};\r\n","import to from 'await-to-js';\r\nimport * as log from 'loglevel';\r\nimport { takeEvery, put, select, call, all } from 'redux-saga/effects';\r\n\r\nimport {\r\n  SET_ENTRY,\r\n  SET_ANCESTORS,\r\n  SET_NAVIGATION_PATH,\r\n  SET_ROUTE,\r\n  SET_SIBLINGS,\r\n  UPDATE_LOADING_STATE,\r\n} from './types';\r\nimport { GET_NODE_TREE } from '~/redux/types/navigation';\r\nimport {\r\n  selectCurrentAncestors,\r\n  selectCurrentNode,\r\n  selectCurrentProject,\r\n  selectCurrentSiblings,\r\n  selectMappedEntry,\r\n  selectRouteEntry,\r\n  selectRouteEntryEntryId,\r\n  selectRouteEntryLanguage,\r\n} from './selectors';\r\nimport { hasNavigationTree } from '~/redux/selectors/navigation';\r\nimport { selectVersionStatus } from '~/redux/selectors/version';\r\nimport { handleRequiresLoginSaga } from '~/user/redux/sagas/login';\r\nimport { ensureNodeTreeSaga } from '~/redux/sagas/navigation';\r\nimport { injectRedux as reduxInjector } from '~/redux/store/injectors';\r\n\r\nimport { LoginHelper } from '~/user';\r\nimport { findContentTypeMapping } from '../util/find-contenttype-mapping';\r\nimport { routeEntryByFieldsQuery } from '../util/queries';\r\nimport { cachedSearchWithCookies } from '~/util/ContensisDeliveryApi';\r\n\r\nexport const routingSagas = [\r\n  takeEvery(SET_NAVIGATION_PATH, getRouteSaga),\r\n  takeEvery(SET_ROUTE, setRouteSaga),\r\n];\r\n\r\n/**\r\n * To navigate / push a specific route via redux middleware\r\n * @param {path, state} action\r\n */\r\nfunction* setRouteSaga(action) {\r\n  yield put({\r\n    type: 'CALL_HISTORY_METHOD',\r\n    payload: {\r\n      method: 'push',\r\n      args: [action.path, action.state],\r\n    },\r\n  });\r\n}\r\n\r\nfunction* getRouteSaga(action) {\r\n  let entry = null;\r\n  try {\r\n    const {\r\n      withEvents,\r\n      routes: { ContentTypeMappings = {} } = {},\r\n      staticRoute,\r\n      cookies,\r\n    } = action;\r\n    const api = cachedSearchWithCookies(cookies.raw);\r\n\r\n    // Inject redux { key, reducer, saga } provided by staticRoute\r\n    if (staticRoute && staticRoute.route.injectRedux)\r\n      yield call(reduxInjectorSaga, staticRoute.route.injectRedux);\r\n\r\n    // Variables we will pass to setRouteEntry\r\n    let pathNode = null,\r\n      ancestors = null,\r\n      children = [],\r\n      siblings = null;\r\n\r\n    let contentTypeMapping = {};\r\n\r\n    // These variables are the return values from\r\n    // calls to withEvents.onRouteLoad and onRouteLoaded\r\n    let appsays,\r\n      requireLogin = false;\r\n\r\n    if (withEvents && withEvents.onRouteLoad) {\r\n      appsays = yield withEvents.onRouteLoad(action);\r\n    }\r\n\r\n    const staticRouteLinkDepth = staticRoute?.route?.params?.linkDepth;\r\n    const staticRouteFields = staticRoute?.route?.params?.fields;\r\n    const entryLinkDepth =\r\n      appsays && appsays.entryLinkDepth !== undefined\r\n        ? appsays.entryLinkDepth\r\n        : 2;\r\n    const setContentTypeLimits =\r\n      (typeof staticRouteLinkDepth === 'undefined' || !staticRouteFields) &&\r\n      !!ContentTypeMappings.find(\r\n        ct => ct.fields || ct.linkDepth || ct.nodeOptions\r\n      );\r\n\r\n    const state = yield select();\r\n    const routeEntry = selectRouteEntry(state, 'js');\r\n    const routeNode = selectCurrentNode(state, 'js');\r\n    const currentPath = action.path; //selectCurrentPath(state);\r\n    const deliveryApiStatus = selectVersionStatus(state);\r\n    const project = selectCurrentProject(state);\r\n    // const isHome = currentPath === '/';\r\n    const isPreview = currentPath && currentPath.startsWith('/preview/');\r\n    const defaultLang = (appsays && appsays.defaultLang) || 'en-GB';\r\n\r\n    if (\r\n      !isPreview &&\r\n      ((appsays && appsays.customRouting) ||\r\n        (staticRoute && !staticRoute.route.fetchNode) ||\r\n        (routeEntry &&\r\n          action.statePath === action.path &&\r\n          (appsays && appsays.refetchNode) !== true))\r\n    ) {\r\n      // To prevent erroneous 404s and wasted network calls, this covers\r\n      // - appsays customRouting and does SET_ENTRY etc. via the consuming app\r\n      // - all staticRoutes (where custom 'route.fetchNode' attribute is falsey)\r\n      // - standard Contensis SiteView Routing where we already have that entry in state\r\n      if (\r\n        routeEntry &&\r\n        (!staticRoute || (staticRoute.route && staticRoute.route.fetchNode))\r\n      ) {\r\n        pathNode = { ...routeNode, entry: null };\r\n        pathNode.entry = entry = routeEntry;\r\n        //Do nothing, the entry is allready the right one.\r\n        // yield put({\r\n        //   type: SET_ENTRY,\r\n        //   entry,\r\n        //   node: routeNode,\r\n        //   isLoading: false,\r\n        // });\r\n        yield put({\r\n          type: UPDATE_LOADING_STATE,\r\n          isLoading: false,\r\n        });\r\n      } else\r\n        yield call(\r\n          setRouteEntry,\r\n          currentPath,\r\n          routeEntry,\r\n          yield select(selectCurrentNode),\r\n          yield select(selectCurrentAncestors),\r\n          yield select(selectCurrentSiblings)\r\n        );\r\n    } else {\r\n      // Handle preview routes\r\n      if (isPreview) {\r\n        let splitPath = currentPath.split('/');\r\n        let entryGuid = splitPath[2];\r\n        let language = defaultLang;\r\n        if (splitPath.length >= 3) {\r\n          //set lang key if available in the path, else use default lang\r\n          //assumes preview url on content type is: http://preview.ALIAS.contensis.cloud/preview/{GUID}/{LANG}\r\n          if (splitPath.length == 4) language = splitPath[3];\r\n          // According to product dev we cannot use Node API\r\n          // for previewing entries as it gives a response of []\r\n          // -- apparently it is not correct to request latest content\r\n          // with Node API\r\n\r\n          let previewEntry = yield api\r\n            .getClient(deliveryApiStatus, project)\r\n            .entries.get({\r\n              id: entryGuid,\r\n              language,\r\n              linkDepth: entryLinkDepth,\r\n            });\r\n          if (previewEntry) {\r\n            pathNode = { entry: previewEntry };\r\n            ({ entry } = pathNode || {});\r\n          }\r\n        }\r\n      } else {\r\n        // Handle all other routes\r\n        let nodeError = undefined;\r\n        [nodeError, pathNode] = yield to(\r\n          api.getNode(\r\n            {\r\n              depth: 0,\r\n              path: currentPath,\r\n              entryFields: setContentTypeLimits\r\n                ? ['sys.contentTypeId', 'sys.id']\r\n                : staticRouteFields || '*',\r\n              entryLinkDepth: setContentTypeLimits\r\n                ? 0\r\n                : typeof staticRouteLinkDepth !== 'undefined'\r\n                ? staticRouteLinkDepth\r\n                : entryLinkDepth,\r\n              language: defaultLang,\r\n              versionStatus: deliveryApiStatus,\r\n            },\r\n            project\r\n          )\r\n        );\r\n        if (nodeError) {\r\n          if ([401, 403].includes(nodeError.status)) {\r\n            // Capture specific auth errors with the delivery api\r\n            // and fire the user down the handleRequiresLoginSaga\r\n            // If auth was successful via a refreshToken we need to reload the page\r\n            // to run this getRouteSaga again with the security token cookie\r\n            const userLoggedIn = yield call(handleRequiresLoginSaga, {\r\n              ...action,\r\n              requireLogin: true,\r\n            });\r\n            if (userLoggedIn && nodeError.status === 401) {\r\n              // Reload the route so we can re-run the routing request now the\r\n              // authentication cookies are written\r\n              return yield call(setRouteSaga, { path: currentPath });\r\n            } else if (userLoggedIn && nodeError.status === 403) {\r\n              return yield call(setRouteSaga, {\r\n                path: LoginHelper.GetAccessDeniedRoute(currentPath),\r\n              });\r\n            } else {\r\n              return yield call(do500, nodeError);\r\n            }\r\n          } else throw nodeError;\r\n        } else ({ entry } = pathNode || {});\r\n\r\n        if (setContentTypeLimits && pathNode?.entry?.sys?.id) {\r\n          // Get fields[] and linkDepth from ContentTypeMapping to get the entry data\r\n          // and current node's ordinates at a specified depth with specified fields\r\n          contentTypeMapping =\r\n            findContentTypeMapping(\r\n              ContentTypeMappings,\r\n              pathNode.entry.sys.contentTypeId\r\n            ) || {};\r\n          const { fields, linkDepth } = contentTypeMapping;\r\n          const query = routeEntryByFieldsQuery(\r\n            pathNode.entry.sys.id,\r\n            pathNode.entry.sys.language,\r\n            fields,\r\n            deliveryApiStatus\r\n          );\r\n          const payload = yield api.search(\r\n            query,\r\n            typeof linkDepth !== 'undefined' ? linkDepth : entryLinkDepth || 0,\r\n            project\r\n          );\r\n          if (payload?.items?.length > 0) {\r\n            pathNode.entry = entry = payload.items[0];\r\n          }\r\n        }\r\n      }\r\n\r\n      // make calls to fetch node ancestors, children,\r\n      // siblings or entire node tree\r\n      [ancestors, children, siblings] = yield call(\r\n        resolveCurrentNodeOrdinates,\r\n        {\r\n          api,\r\n          appsays,\r\n          contentTypeMapping,\r\n          language: defaultLang,\r\n          path: currentPath,\r\n          pathNode,\r\n          project,\r\n          versionStatus: deliveryApiStatus,\r\n        }\r\n      );\r\n\r\n      if (children) pathNode.children = children;\r\n    }\r\n\r\n    const resolvedContentTypeMapping =\r\n      findContentTypeMapping(\r\n        ContentTypeMappings,\r\n        pathNode?.entry?.sys?.contentTypeId\r\n      ) || {};\r\n\r\n    // Inject redux { key, reducer, saga } provided by ContentTypeMapping\r\n    if (resolvedContentTypeMapping.injectRedux)\r\n      yield call(reduxInjectorSaga, resolvedContentTypeMapping.injectRedux);\r\n\r\n    if (withEvents && withEvents.onRouteLoaded) {\r\n      // Check if the app has provided a requireLogin boolean flag or groups array\r\n      // in addition to checking if requireLogin is set in the route definition\r\n      ({ requireLogin } =\r\n        (yield withEvents.onRouteLoaded({ ...action, entry })) || {});\r\n    }\r\n\r\n    if (requireLogin !== false) {\r\n      // Do not call the login feature saga if requireLogin is false\r\n      yield call(handleRequiresLoginSaga, {\r\n        ...action,\r\n        entry,\r\n        requireLogin,\r\n      });\r\n    }\r\n\r\n    if (!appsays || !appsays.preventScrollTop) {\r\n      // Scroll into View\r\n      if (typeof window !== 'undefined') window.scrollTo(0, 0);\r\n    }\r\n\r\n    if (pathNode?.entry?.sys?.id) {\r\n      entry = pathNode.entry;\r\n\r\n      yield call(\r\n        setRouteEntry,\r\n        currentPath,\r\n        entry,\r\n        pathNode,\r\n        ancestors,\r\n        siblings,\r\n        staticRoute?.route?.fetchNode?.entryMapper ||\r\n          resolvedContentTypeMapping.entryMapper,\r\n        false,\r\n        appsays?.refetchNode\r\n      );\r\n    } else {\r\n      if (staticRoute)\r\n        yield call(\r\n          setRouteEntry,\r\n          currentPath,\r\n          null,\r\n          pathNode,\r\n          ancestors,\r\n          siblings\r\n        );\r\n      else yield call(do404);\r\n    }\r\n  } catch (e) {\r\n    log.error(...['Error running route saga:', e, e.stack]);\r\n    yield call(do500, e);\r\n  }\r\n}\r\n\r\nfunction* resolveCurrentNodeOrdinates({\r\n  api,\r\n  appsays,\r\n  contentTypeMapping,\r\n  language,\r\n  path,\r\n  pathNode,\r\n  project,\r\n  versionStatus,\r\n}) {\r\n  const apiCall = [() => null, () => null, () => null, () => null];\r\n\r\n  // if appsays customNavigation: true, we will set doNavigation to false\r\n  // if appsays customNavigation: { ... }, we will set doNavigation to the customNavigation object and check for child elements\r\n  // if appsays nothing we will set doNavigation to true and continue to do navigation calls\r\n  const doNavigation =\r\n    !appsays ||\r\n    (appsays?.customNavigation === true\r\n      ? false\r\n      : appsays?.customNavigation || true);\r\n\r\n  const {\r\n    entryLinkDepth = 0,\r\n    fields,\r\n    linkDepth,\r\n    nodeOptions = {},\r\n  } = contentTypeMapping;\r\n\r\n  if (pathNode && pathNode.id) {\r\n    if (doNavigation === true || doNavigation.ancestors) {\r\n      apiCall[0] = function* getAncestors() {\r\n        try {\r\n          return yield api.getAncestors(\r\n            {\r\n              id: pathNode.id,\r\n              language,\r\n              versionStatus,\r\n            },\r\n            project\r\n          );\r\n        } catch (ex) {\r\n          log.info('Problem fetching ancestors', ex);\r\n          return [];\r\n        }\r\n      };\r\n    }\r\n\r\n    const childrenDepth =\r\n      doNavigation === true || doNavigation.children === true\r\n        ? 1\r\n        : (doNavigation && doNavigation.children) || 0;\r\n\r\n    if (\r\n      (typeof nodeOptions?.children === 'undefined' && childrenDepth > 0) ||\r\n      nodeOptions.children\r\n    ) {\r\n      const childrenOptions =\r\n        typeof nodeOptions.children === 'boolean' ? {} : nodeOptions.children;\r\n      apiCall[1] = function* getChildren() {\r\n        try {\r\n          return yield api.getNode(\r\n            {\r\n              depth:\r\n                childrenOptions.depth !== undefined\r\n                  ? childrenOptions.depth\r\n                  : childrenDepth,\r\n              path,\r\n              entryFields: childrenOptions.fields || fields || undefined,\r\n              entryLinkDepth:\r\n                typeof childrenOptions.linkDepth !== 'undefined'\r\n                  ? childrenOptions.linkDepth\r\n                  : typeof linkDepth !== 'undefined'\r\n                  ? linkDepth\r\n                  : entryLinkDepth,\r\n              language,\r\n              versionStatus,\r\n            },\r\n            project\r\n          );\r\n        } catch (ex) {\r\n          log.info('Problem fetching children', ex);\r\n          return [];\r\n        }\r\n      };\r\n    }\r\n\r\n    if (\r\n      (typeof nodeOptions?.siblings === 'undefined' && doNavigation.siblings) ||\r\n      nodeOptions.siblings\r\n    ) {\r\n      apiCall[2] = function* getSiblings() {\r\n        try {\r\n          return yield api.getSiblings(\r\n            {\r\n              id: pathNode.id,\r\n              entryFields: nodeOptions?.siblings?.fields || fields || undefined,\r\n              entryLinkDepth:\r\n                typeof nodeOptions?.siblings?.linkDepth !== 'undefined'\r\n                  ? nodeOptions.siblings.linkDepth\r\n                  : typeof linkDepth !== 'undefined'\r\n                  ? linkDepth\r\n                  : entryLinkDepth,\r\n              includeInMenu: true,\r\n              language,\r\n              versionStatus,\r\n            },\r\n            project\r\n          );\r\n        } catch (ex) {\r\n          log.info('Problem fetching siblings', ex);\r\n          return [];\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  const isTreeLoaded = yield select(hasNavigationTree);\r\n  if (!isTreeLoaded && (doNavigation === true || doNavigation.tree))\r\n    apiCall[3] = function* getNodeTree() {\r\n      const treeDepth =\r\n        doNavigation === true ||\r\n        !doNavigation.tree ||\r\n        doNavigation.tree === true\r\n          ? 2\r\n          : doNavigation.tree;\r\n\r\n      if (typeof window !== 'undefined') {\r\n        return yield put({\r\n          type: GET_NODE_TREE,\r\n          language,\r\n          treeDepth,\r\n        });\r\n      } else {\r\n        return yield call(ensureNodeTreeSaga, {\r\n          language,\r\n          treeDepth,\r\n        });\r\n      }\r\n    };\r\n\r\n  const [loadAncestors, loadChildren, loadSiblings, loadTree] = apiCall;\r\n  const [ancestors, nodeWithChildren, siblings] = yield all([\r\n    loadAncestors(),\r\n    loadChildren(),\r\n    loadSiblings(),\r\n    loadTree(),\r\n  ]);\r\n  return [ancestors, nodeWithChildren?.children, siblings];\r\n}\r\n\r\nfunction* setRouteEntry(\r\n  currentPath,\r\n  entry,\r\n  node,\r\n  ancestors,\r\n  siblings,\r\n  entryMapper,\r\n  notFound = false,\r\n  remapEntry = false\r\n) {\r\n  const entrySys = (entry && entry.sys) || {};\r\n\r\n  // Update a window global to provide the preview toolbar\r\n  // an updated entry id in client-side navigation\r\n  if (typeof window !== 'undefined') window.ContensisEntryId = entrySys.id;\r\n\r\n  const currentEntryId = yield select(selectRouteEntryEntryId);\r\n  const currentEntryLang = yield select(selectRouteEntryLanguage);\r\n  const mappedEntry =\r\n    currentEntryId === entrySys.id &&\r\n    currentEntryLang === entrySys.language &&\r\n    remapEntry === false\r\n      ? (yield select(selectMappedEntry, 'js')) || {}\r\n      : yield mapRouteEntry(entryMapper, {\r\n          ...node,\r\n          entry,\r\n          ancestors,\r\n          siblings,\r\n        });\r\n\r\n  yield all([\r\n    put({\r\n      type: SET_ENTRY,\r\n      id: entrySys.id,\r\n      currentPath,\r\n      entry,\r\n      mappedEntry,\r\n      node,\r\n      notFound,\r\n    }),\r\n    ancestors &&\r\n      put({\r\n        type: SET_ANCESTORS,\r\n        ancestors,\r\n      }),\r\n    siblings &&\r\n      put({\r\n        type: SET_SIBLINGS,\r\n        siblings,\r\n      }),\r\n  ]);\r\n}\r\n\r\nfunction* mapRouteEntry(entryMapper, node) {\r\n  try {\r\n    if (typeof entryMapper === 'function') {\r\n      const state = yield select();\r\n      const mappedEntry = yield call(entryMapper, node, state);\r\n      return mappedEntry;\r\n    }\r\n  } catch (e) {\r\n    log.error(...['Error running entryMapper:', e, e.stack]);\r\n  }\r\n  return;\r\n}\r\n\r\nfunction* do404() {\r\n  yield call(clientReloadHitServer);\r\n  yield put({\r\n    type: SET_ENTRY,\r\n    id: null,\r\n    entry: null,\r\n    notFound: true,\r\n  });\r\n}\r\n\r\nfunction* clientReloadHitServer() {\r\n  const stateEntry = yield select(selectRouteEntry);\r\n\r\n  // If in client and there is a stateEntry.sys field reload the page,\r\n  // on the 2nd load stateEntry.sys should be null at this point,\r\n  // we do not wish to reload again and get stuck in an infinite reloading loop\r\n  if (typeof window !== 'undefined' && (stateEntry?.sys || null)) {\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nfunction* do500(error) {\r\n  yield put({\r\n    type: SET_ENTRY,\r\n    id: null,\r\n    entry: null,\r\n    notFound: true,\r\n    isError: true,\r\n    error,\r\n    statusCode: error && error.status ? error.status : 500,\r\n  });\r\n}\r\n\r\nfunction* reduxInjectorSaga(injectorFn) {\r\n  if (typeof injectorFn === 'function') {\r\n    const { key, reducer, saga } = yield injectorFn();\r\n    reduxInjector({ key, reducer, saga });\r\n  }\r\n}\r\n","import { to } from 'await-to-js';\r\nimport { put, select, takeEvery } from 'redux-saga/effects';\r\nimport { setRoute } from '~/routing/redux/actions';\r\nimport { selectCurrentSearch } from '~/routing/redux/selectors';\r\nimport { queryParams } from '~/util/navigation';\r\nimport {\r\n  REGISTER_USER,\r\n  REGISTER_USER_SUCCESS,\r\n  REGISTER_USER_FAILED,\r\n} from '../types';\r\n\r\nexport const registerSagas = [\r\n  takeEvery(REGISTER_USER, registerSaga),\r\n  takeEvery(REGISTER_USER_SUCCESS, redirectSaga),\r\n];\r\n\r\nfunction* registerSaga({ user, mappers }) {\r\n  let requestBody = user;\r\n  // Allow use of request mapper to take a user object\r\n  // of any format and return the payload for the api request\r\n  if (mappers && mappers.request && typeof mappers.request === 'function') {\r\n    requestBody = yield mappers.request(user);\r\n  }\r\n\r\n  // Make POST call to register API\r\n  const response = yield fetch('/account/register', {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(requestBody),\r\n  });\r\n\r\n  if (response.ok) {\r\n    let mappedResponse;\r\n    const [, responseBody] = yield to(response.json());\r\n    if (responseBody) {\r\n      // Allow use of response mapper to convert the successful user object\r\n      // from the api response body into a user object of any format\r\n      if (\r\n        mappers &&\r\n        mappers.response &&\r\n        typeof mappers.response === 'function'\r\n      ) {\r\n        mappedResponse = yield mappers.response(responseBody);\r\n      }\r\n      // Update user object with mappedResponse or responseBody\r\n      yield put({\r\n        type: REGISTER_USER_SUCCESS,\r\n        user: mappedResponse || responseBody,\r\n      });\r\n    } else {\r\n      // OK response but unable to parse the response body\r\n      yield put({\r\n        type: REGISTER_USER_FAILED,\r\n        error: {\r\n          message:\r\n            'Unable to parse the created user from the register service response',\r\n        },\r\n      });\r\n    }\r\n  } else {\r\n    // Not OK responses, these can be due to service availability\r\n    // or status codes echoed from the responses received from\r\n    // management api when registering the user\r\n    const [, errorResponse] = yield to(response.json());\r\n    const error = (errorResponse && errorResponse.error) || errorResponse || {};\r\n    // Get something meaningful from the response if there is no message in the body\r\n    if (!error.message) {\r\n      error.message = `Registration service: ${response.statusText}`;\r\n      error.status = response.status;\r\n    }\r\n    yield put({\r\n      type: REGISTER_USER_FAILED,\r\n      error,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* redirectSaga() {\r\n  // Check if querystring contains a redirect_uri\r\n  const currentQs = queryParams(yield select(selectCurrentSearch));\r\n  const redirectUri = currentQs.redirect_uri || currentQs.redirect;\r\n\r\n  // We must use redux based navigation to preserve the registration state\r\n  if (redirectUri) yield put(setRoute(redirectUri));\r\n}\r\n","const PAP_URL = 'https://pap.zengenti.com';\r\n\r\nconst USER_ENVS_URI = 'my-environments';\r\nconst USER_RESEND_VERIFICATION_URI = 'account/verify/resend';\r\nconst USER_REQUEST_PASSWORD_RESET_URI = 'account/reset';\r\nconst USER_RESET_PASSWORD_URI = 'account/reset/password';\r\n\r\nconst USER_ENVS_URL = `${PAP_URL}/${USER_ENVS_URI}`;\r\n\r\nconst BASE_OPTIONS = {\r\n  method: 'GET',\r\n  headers: { 'Content-Type': 'application/json' },\r\n};\r\n\r\nexport class UserHelper {\r\n  static async GetUsersEnvironments(securityToken) {\r\n    const options = {\r\n      ...BASE_OPTIONS,\r\n      headers: {\r\n        'x-security-token': securityToken,\r\n      },\r\n    };\r\n    return await UserHelper.get(USER_ENVS_URL, options);\r\n  }\r\n  static async ResendUserVerification(userEmail) {\r\n    const options = {\r\n      ...BASE_OPTIONS,\r\n    };\r\n    return await UserHelper.get(\r\n      `/${USER_RESEND_VERIFICATION_URI}?user=${userEmail}`,\r\n      options\r\n    );\r\n  }\r\n  static async RequestPasswordReset(userEmailObject) {\r\n    const options = {\r\n      ...BASE_OPTIONS,\r\n      body: JSON.stringify(userEmailObject),\r\n    };\r\n    options.method = 'POST';\r\n\r\n    return await UserHelper.get(`/${USER_REQUEST_PASSWORD_RESET_URI}`, options);\r\n  }\r\n  static async ResetPassword(resetPasswordObject) {\r\n    const options = {\r\n      ...BASE_OPTIONS,\r\n      body: JSON.stringify(resetPasswordObject),\r\n    };\r\n    options.method = 'POST';\r\n\r\n    return await UserHelper.get(`/${USER_RESET_PASSWORD_URI}`, options);\r\n  }\r\n\r\n  static async get(url, options = BASE_OPTIONS) {\r\n    try {\r\n      const responseBody = await api(url, options);\r\n      return responseBody;\r\n    } catch (err) {\r\n      return { error: { message: err.message } };\r\n    }\r\n  }\r\n}\r\n\r\nasync function api(url, options) {\r\n  return fetch(url, options)\r\n    .then(async response => {\r\n      return response.json().then(data => data);\r\n    })\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n}\r\n","import { put, takeEvery, select } from 'redux-saga/effects';\r\nimport { to } from 'await-to-js';\r\nimport { getManagementApiClient } from '~/user/util/ContensisManagementApi';\r\nimport { UserHelper } from '~/user/util/userHelper';\r\nimport { selectClientCredentials } from '../selectors';\r\nimport {\r\n  REQUEST_USER_PASSWORD_RESET,\r\n  RESET_USER_PASSWORD,\r\n  REQUEST_USER_PASSWORD_RESET_ERROR,\r\n  REQUEST_USER_PASSWORD_RESET_SENDING,\r\n  REQUEST_USER_PASSWORD_RESET_SUCCESS,\r\n  RESET_USER_PASSWORD_ERROR,\r\n  RESET_USER_PASSWORD_SENDING,\r\n  RESET_USER_PASSWORD_SUCCESS,\r\n  CHANGE_USER_PASSWORD,\r\n  CHANGE_USER_PASSWORD_SENDING,\r\n  CHANGE_USER_PASSWORD_SUCCESS,\r\n  CHANGE_USER_PASSWORD_ERROR,\r\n} from '../types';\r\n\r\nexport const resetPasswordSagas = [\r\n  takeEvery(REQUEST_USER_PASSWORD_RESET, requestPasswordResetSaga),\r\n  takeEvery(RESET_USER_PASSWORD, resetPasswordSaga),\r\n  takeEvery(CHANGE_USER_PASSWORD, changePasswordSaga),\r\n];\r\n\r\nfunction* requestPasswordResetSaga(action) {\r\n  const userEmailObject = action.userEmailObject;\r\n  yield put({\r\n    type: REQUEST_USER_PASSWORD_RESET_SENDING,\r\n  });\r\n  if (userEmailObject && userEmailObject.userEmail) {\r\n    try {\r\n      const passwordResetRequestResponse =\r\n        yield UserHelper.RequestPasswordReset(userEmailObject);\r\n\r\n      if (passwordResetRequestResponse) {\r\n        if (!passwordResetRequestResponse.error) {\r\n          yield put({\r\n            type: REQUEST_USER_PASSWORD_RESET_SUCCESS,\r\n          });\r\n        } else {\r\n          yield put({\r\n            type: REQUEST_USER_PASSWORD_RESET_ERROR,\r\n            error: passwordResetRequestResponse.error.message,\r\n          });\r\n        }\r\n      } else {\r\n        yield put({\r\n          type: REQUEST_USER_PASSWORD_RESET_ERROR,\r\n          error: 'No response from server',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      yield put({\r\n        type: REQUEST_USER_PASSWORD_RESET_ERROR,\r\n        error: error && error.toString(),\r\n      });\r\n    }\r\n  } else {\r\n    yield put({\r\n      type: REQUEST_USER_PASSWORD_RESET_ERROR,\r\n      error: 'Invalid object',\r\n    });\r\n  }\r\n}\r\n\r\nfunction* resetPasswordSaga(action) {\r\n  const resetPasswordObject = action.resetPasswordObject;\r\n\r\n  yield put({\r\n    type: RESET_USER_PASSWORD_SENDING,\r\n  });\r\n  if (resetPasswordObject.token && resetPasswordObject.password) {\r\n    try {\r\n      const resetPasswordResponse = yield UserHelper.ResetPassword(\r\n        resetPasswordObject\r\n      );\r\n\r\n      if (resetPasswordResponse) {\r\n        if (!resetPasswordResponse.error) {\r\n          yield put({\r\n            type: RESET_USER_PASSWORD_SUCCESS,\r\n          });\r\n        } else {\r\n          const error =\r\n            (resetPasswordResponse.error.data &&\r\n              resetPasswordResponse.error.data.length > 0 &&\r\n              resetPasswordResponse.error.data[0].message) ||\r\n            resetPasswordResponse.error.message;\r\n          yield put({\r\n            type: RESET_USER_PASSWORD_ERROR,\r\n            error,\r\n          });\r\n        }\r\n      } else {\r\n        yield put({\r\n          type: RESET_USER_PASSWORD_ERROR,\r\n          error: 'No response from server',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      yield put({\r\n        type: RESET_USER_PASSWORD_ERROR,\r\n        error: error && error.toString(),\r\n      });\r\n    }\r\n  } else {\r\n    yield put({\r\n      type: RESET_USER_PASSWORD_ERROR,\r\n      error: 'Invalid object',\r\n    });\r\n  }\r\n}\r\n\r\n// userId\r\n// existingPassword\r\n// newPassword\r\nfunction* changePasswordSaga(action) {\r\n  if (\r\n    !action ||\r\n    !action.userId ||\r\n    !action.currentPassword ||\r\n    !action.newPassword\r\n  ) {\r\n    yield put({\r\n      type: CHANGE_USER_PASSWORD_ERROR,\r\n      error: 'Invalid action object sent to changePassword saga',\r\n    });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const changePasswordObject = {\r\n      userId: action.userId,\r\n      existing: action.currentPassword,\r\n      new: action.newPassword,\r\n    };\r\n\r\n    yield put({\r\n      type: CHANGE_USER_PASSWORD_SENDING,\r\n    });\r\n    const clientCredentials = yield select(selectClientCredentials, 'js');\r\n    const client = yield getManagementApiClient({ ...clientCredentials });\r\n\r\n    const [err, res] = yield to(\r\n      client.security.users.updatePassword(changePasswordObject)\r\n    );\r\n\r\n    if (err) {\r\n      const error =\r\n        (err?.data?.data?.length > 0 && err.data.data[0].message) ||\r\n        err?.data?.message;\r\n      yield put({\r\n        type: CHANGE_USER_PASSWORD_ERROR,\r\n        error,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // // eslint-disable-next-line no-console\r\n    // console.log(changePasswordObject);\r\n    // // eslint-disable-next-line no-console\r\n    // console.log(userCredentialsObject);\r\n    yield put({\r\n      type: CHANGE_USER_PASSWORD_SUCCESS,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: CHANGE_USER_PASSWORD_ERROR,\r\n      error: error && error.toString(),\r\n    });\r\n  }\r\n}\r\n","import { loginSagas } from './login';\r\nimport { registerSagas } from './register';\r\nimport { resetPasswordSagas } from './resetPassword';\r\n\r\nexport const userSagas = [\r\n  ...loginSagas,\r\n  ...registerSagas,\r\n  ...resetPasswordSagas,\r\n];\r\n","// index.js\r\nimport { all } from 'redux-saga/effects';\r\nimport { navigationSagas } from './navigation';\r\nimport { routingSagas } from '~/routing/redux/sagas';\r\nimport { userSagas } from '~/user/redux/sagas';\r\n\r\nexport default function (featureSagas = []) {\r\n  return function* rootSaga() {\r\n    const subSagas = [...routingSagas, ...navigationSagas, ...userSagas];\r\n    yield all([...subSagas, ...featureSagas]);\r\n  };\r\n}\r\n","const servers = SERVERS; /* global SERVERS */\r\nconst alias = servers.alias.toLowerCase();\r\nconst publicUri = PUBLIC_URI; /* global PUBLIC_URI */\r\nconst projects = PROJECTS; /* global PROJECTS */\r\n\r\n// return a projectId via the request hostname\r\nconst pickProject = (hostname, query) => {\r\n  // if localhost we can only infer via a querystring, and take your word for it\r\n  if (hostname == 'localhost') {\r\n    return (query && query.p) || projects[0].id;\r\n  }\r\n\r\n  // if hostname is the actual public uri we can return the first project from the list\r\n  if (hostname == publicUri) {\r\n    return projects[0].id;\r\n  }\r\n\r\n  let project = 'unknown';\r\n\r\n  // // go through all the defined projects\r\n  // Object.entries(projects).map(([, p]) => {\r\n  const p = projects[0];\r\n\r\n  // check if we're accessing via the project's public uri\r\n  if (hostname.includes(p.publicUri)) project = p.id;\r\n\r\n  // the url structure is different for website (we don't prefix)\r\n  if (p.id.startsWith('website')) {\r\n    // check for internal and external hostnames\r\n    // we check live and preview distinctly so our rule does not clash with\r\n    // hostnames that use a project prefix\r\n    if (\r\n      hostname.includes(`live-${alias}.cloud.contensis.com`) ||\r\n      hostname.includes(`live.${alias}.contensis.cloud`) ||\r\n      hostname.includes(`preview-${alias}.cloud.contensis.com`) ||\r\n      hostname.includes(`preview.${alias}.contensis.cloud`)\r\n    )\r\n      project = p.id;\r\n  } else {\r\n    // check for internal and external hostnames, prefixed with the projectId\r\n    if (\r\n      hostname.includes(`${p.id.toLowerCase()}-${alias}.cloud.contensis.com`) ||\r\n      hostname.includes(`${p.id.toLowerCase()}.${alias}.contensis.cloud`)\r\n    )\r\n      project = p.id;\r\n  }\r\n  // });\r\n  return project === 'unknown' ? p.id : project;\r\n};\r\n\r\nexport default pickProject;\r\n","import React from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { AppRootProps } from '../routing/routes';\r\nimport { RouteLoader } from '../routing';\r\n\r\nconst AppRoot = (props: AppRootProps) => {\r\n  return <RouteLoader {...props} />;\r\n};\r\n\r\nexport default hot(module)(AppRoot);\r\n"],"names":["selectedHistory","window","createBrowserHistory","createMemoryHistory","history","options","browserHistory","navigationSagas","takeEvery","GET_NODE_TREE","ensureNodeTreeSaga","action","state","select","hasNavigationTree","deliveryApiVersionStatus","selectVersionStatus","project","selectCurrentProject","nodes","deliveryApi","getClient","getRoot","depth","treeDepth","language","put","type","SET_NODE_TREE","GET_NODE_TREE_ERROR","ex","log","error","toString","sys","contentTypeId","dataFormat","filename","id","includeInSearch","slug","uri","versionStatus","Fields","entryTitle","entryDescription","keywords","wildcard","fieldExpression","field","value","operator","weight","Array","isArray","equalToOrIn","Op","defaultExpressions","equalTo","arr","length","in","routeEntryByFieldsQuery","fields","query","Query","routingSagas","SET_NAVIGATION_PATH","getRouteSaga","SET_ROUTE","setRouteSaga","payload","method","args","path","entry","_staticRoute$route","_staticRoute$route$pa","_staticRoute$route2","_staticRoute$route2$p","_pathNode2","_pathNode2$entry","_pathNode2$entry$sys","_pathNode3","_pathNode3$entry","_pathNode3$entry$sys","withEvents","routes","ContentTypeMappings","staticRoute","cookies","api","cachedSearchWithCookies","raw","route","injectRedux","call","reduxInjectorSaga","pathNode","ancestors","children","siblings","contentTypeMapping","appsays","requireLogin","onRouteLoad","staticRouteLinkDepth","params","linkDepth","staticRouteFields","entryLinkDepth","undefined","setContentTypeLimits","find","ct","nodeOptions","routeEntry","selectRouteEntry","routeNode","selectCurrentNode","currentPath","deliveryApiStatus","isPreview","startsWith","defaultLang","customRouting","fetchNode","statePath","refetchNode","UPDATE_LOADING_STATE","isLoading","setRouteEntry","selectCurrentAncestors","selectCurrentSiblings","splitPath","split","entryGuid","previewEntry","entries","get","_pathNode","_pathNode$entry","_pathNode$entry$sys","nodeError","to","getNode","entryFields","includes","status","userLoggedIn","handleRequiresLoginSaga","LoginHelper","GetAccessDeniedRoute","do500","_payload$items","findContentTypeMapping","search","items","resolveCurrentNodeOrdinates","resolvedContentTypeMapping","onRouteLoaded","preventScrollTop","scrollTo","_staticRoute$route3","_staticRoute$route3$f","_appsays","entryMapper","do404","e","stack","apiCall","doNavigation","customNavigation","getAncestors","info","childrenDepth","childrenOptions","getChildren","getSiblings","_nodeOptions$siblings","_nodeOptions$siblings2","includeInMenu","isTreeLoaded","tree","getNodeTree","loadAncestors","loadChildren","loadSiblings","loadTree","nodeWithChildren","all","node","notFound","remapEntry","entrySys","ContensisEntryId","currentEntryId","selectRouteEntryEntryId","currentEntryLang","selectRouteEntryLanguage","mappedEntry","selectMappedEntry","mapRouteEntry","SET_ENTRY","SET_ANCESTORS","SET_SIBLINGS","clientReloadHitServer","stateEntry","location","reload","isError","statusCode","injectorFn","key","reducer","saga","reduxInjector","registerSagas","REGISTER_USER","registerSaga","REGISTER_USER_SUCCESS","redirectSaga","user","mappers","requestBody","request","response","fetch","headers","Accept","body","JSON","stringify","ok","mappedResponse","responseBody","json","REGISTER_USER_FAILED","message","errorResponse","statusText","currentQs","queryParams","selectCurrentSearch","redirectUri","redirect_uri","redirect","setRoute","PAP_URL","USER_ENVS_URI","USER_RESEND_VERIFICATION_URI","USER_REQUEST_PASSWORD_RESET_URI","USER_RESET_PASSWORD_URI","USER_ENVS_URL","BASE_OPTIONS","UserHelper","GetUsersEnvironments","securityToken","ResendUserVerification","userEmail","RequestPasswordReset","userEmailObject","ResetPassword","resetPasswordObject","url","err","then","data","catch","resetPasswordSagas","REQUEST_USER_PASSWORD_RESET","requestPasswordResetSaga","RESET_USER_PASSWORD","resetPasswordSaga","CHANGE_USER_PASSWORD","changePasswordSaga","REQUEST_USER_PASSWORD_RESET_SENDING","passwordResetRequestResponse","REQUEST_USER_PASSWORD_RESET_SUCCESS","REQUEST_USER_PASSWORD_RESET_ERROR","RESET_USER_PASSWORD_SENDING","token","password","resetPasswordResponse","RESET_USER_PASSWORD_SUCCESS","RESET_USER_PASSWORD_ERROR","userId","currentPassword","newPassword","CHANGE_USER_PASSWORD_ERROR","changePasswordObject","existing","new","CHANGE_USER_PASSWORD_SENDING","clientCredentials","selectClientCredentials","client","getManagementApiClient","res","security","users","updatePassword","_err$data","_err$data$data","_err$data2","CHANGE_USER_PASSWORD_SUCCESS","userSagas","loginSagas","featureSagas","rootSaga","subSagas","servers","SERVERS","alias","toLowerCase","publicUri","PUBLIC_URI","projects","PROJECTS","pickProject","hostname","p","AppRoot","props","React","createElement","RouteLoader"],"mappings":"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"}
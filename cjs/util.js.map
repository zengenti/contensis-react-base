{"version":3,"file":"util.js","sources":["../src/util/stringifyStrings.js","../src/util/urls.ts","../src/util/json-mapper.ts"],"sourcesContent":["const stringifyStrings = obj => {\r\n  const returnObj = Array.isArray(obj) ? [] : {};\r\n  Object.entries(obj).forEach(([key, value]) => {\r\n    switch (typeof value) {\r\n      case 'string':\r\n        returnObj[key] = JSON.stringify(value);\r\n        break;\r\n      case 'object':\r\n        returnObj[key] = stringifyStrings(value);\r\n        break;\r\n      default:\r\n        returnObj[key] = value;\r\n        break;\r\n    }\r\n  });\r\n  return returnObj;\r\n};\r\n\r\nmodule.exports = stringifyStrings;\r\n","const url = (alias: string, project: string) => {\r\n  const projectAndAlias =\r\n    project && project.toLowerCase() !== 'website'\r\n      ? `${project.toLowerCase()}-${alias}`\r\n      : alias;\r\n  return {\r\n    api: `https://api-${alias}.cloud.contensis.com`,\r\n    cms: `https://cms-${alias}.cloud.contensis.com`,\r\n    liveWeb: `https://live-${projectAndAlias}.cloud.contensis.com`,\r\n    previewWeb: `https://preview-${projectAndAlias}.cloud.contensis.com`,\r\n    iisWeb: `https://iis-live-${projectAndAlias}.cloud.contensis.com`,\r\n    iisPreviewWeb: `https://iis-preview-${projectAndAlias}.cloud.contensis.com`,\r\n  };\r\n};\r\n\r\nexport default url;\r\n","import { Entry } from 'contensis-delivery-api/lib/models';\r\nimport mapJson, { jpath } from 'jsonpath-mapper';\r\nimport MappingTemplate, {\r\n  PureJsFunction,\r\n} from 'jsonpath-mapper/dist/models/Template';\r\nimport { AppState } from '~/redux/appstate';\r\nimport { EntryMapper, RouteNode } from '~/routing/routes';\r\n\r\nexport { default as mapJson, jpath } from 'jsonpath-mapper';\r\n\r\ntype Mappers<S> = { [contentTypeId: string]: MappingTemplate<S> };\r\n\r\n/**\r\n *\r\n * @param {object} json The source object we wish to transform\r\n * @param {object} template The mapping template we wish to apply to the source\r\n * object to generate the intended target object\r\n */\r\nexport const useMapper = <T, S>(json: S, template: MappingTemplate<S>) => {\r\n  return template ? (mapJson((json || {}) as S, template) as T) : json;\r\n};\r\n\r\nconst chooseMapperByFieldValue = <S, T extends Mappers<S>>(\r\n  entry: S,\r\n  mappers: T,\r\n  field = 'sys.contentTypeId'\r\n) => {\r\n  const fieldValue = jpath(field, entry || {}) as string;\r\n  return (mappers[fieldValue] || mappers.default || {}) as T[keyof T];\r\n};\r\n\r\n/**\r\n * useEntriesMapper hook to take a list of entries from Delivery API along\r\n * with mappers for each contentTypeId and return an array of mapped objects\r\n * @param {any} entry The source entry we wish to transform\r\n * @param {object} mappers Object with keys containing mapper templates,\r\n * the key name matching sys.contentTypeId\r\n * @param {string} field Only include if we need to match content based on\r\n * a field other than sys.contentTypeId in the source data\r\n * @returns {object} Object transformed using a matched content type or\r\n * a default mapper template, returns an empty object if no mapper template\r\n * couild be applied.\r\n */\r\nexport const useEntriesMapper = <S, T extends Mappers<S>>(\r\n  entry: S,\r\n  mappers: T,\r\n  field = 'sys.contentTypeId'\r\n) => {\r\n  const mapper = chooseMapperByFieldValue(entry, mappers, field);\r\n  return useMapper(entry, mapper);\r\n};\r\n\r\n/**\r\n * Deprecated: due to misleading name, use the hook useEntriesMapper instead\r\n */\r\nexport const useEntryMapper = useEntriesMapper;\r\n\r\n/**\r\n * mapEntries mapping function to take a list of entries from Delivery API along\r\n * with mappers for each contentTypeId and return an array of mapped objects\r\n * @param {any} entry The source entry we wish to transform\r\n * @param {object} mappers Object with keys containing mapper templates,\r\n * the key name matching sys.contentTypeId\r\n * @param {string} field Only include if we need to match content based on\r\n * a field other than sys.contentTypeId in the source data\r\n * @returns {object} Object transformed using a matched content type or\r\n * a default mapper template, returns an empty object if no mapper template\r\n * couild be applied.\r\n */\r\nexport const mapEntries = <\r\n  S,\r\n  Mappers extends { [contentTypeId: string]: MappingTemplate<S> }\r\n>(\r\n  entries: S[],\r\n  mappers: Mappers,\r\n  field = 'sys.contentTypeId'\r\n) =>\r\n  entries.map(entry => {\r\n    const mapper = chooseMapperByFieldValue(entry, mappers, field);\r\n    return mapper ? mapJson((entry || {}) as S, mapper) : entry;\r\n  });\r\n\r\n/**\r\n * mapComposer mapping function to take a composer field from Delivery API along\r\n * with mappers for each Composer Item \"type\" and return an array of mapped components\r\n * @param {array} composer Composer field array of Composer Items\r\n * @param {object} mappers A keyed object with each key matching the Composer Item \"type\"\r\n * @returns {array} Array of mapped objects transformed using a matched Composer Item \"type\" mapping\r\n * or null. Injects a \"_type\" property into each transformed object in the array to indicate\r\n * where the mapping originated and for what component the mapped object is representing\r\n */\r\nexport const mapComposer = <\r\n  S extends { type: string; value: any },\r\n  T extends Mappers<S>\r\n>(\r\n  composer: S[],\r\n  mappers: T\r\n) =>\r\n  Array.isArray(composer)\r\n    ? composer.map((composerItem, index) => {\r\n        const itemValue = composerItem.value;\r\n        const mapper = mappers[composerItem.type] || mappers.default;\r\n        if (mapper) {\r\n          // Add some fields into the composer item mapper and return object\r\n          const addedFields = {\r\n            _type: composerItem.type,\r\n            _index: index,\r\n          };\r\n\r\n          // Add fields and $root item into the composer item source object\r\n          // for use inside each item mapping, for arrays we inject the added fields\r\n          // into the first array item. This is useful if we require any of\r\n          // composerItem.type, composerItem index/position and composer $root\r\n          // in scope to influence any composer item's mapping logic\r\n          const sourceObject =\r\n            itemValue && Array.isArray(itemValue)\r\n              ? itemValue.map((iv, idx) =>\r\n                  idx !== 0\r\n                    ? iv\r\n                    : typeof iv === 'object'\r\n                    ? { ...addedFields, ...iv, $root: composer }\r\n                    : iv\r\n                )\r\n              : typeof itemValue === 'object'\r\n              ? { ...addedFields, ...itemValue, $root: composer }\r\n              : itemValue || {};\r\n\r\n          // Apply the composer item mapping\r\n          const mappedFields = mapJson(sourceObject, mapper) as any;\r\n\r\n          // Add the extra fields in with the return object\r\n          return mappedFields && typeof mappedFields === 'object'\r\n            ? { ...mappedFields, ...addedFields }\r\n            : mappedFields;\r\n        } else return {};\r\n      })\r\n    : composer || [];\r\n\r\n/**\r\n * useComposerMapper hook to take a composer field from Delivery API along\r\n * with mappers for each Composer Item \"type\" and return an array of mapped components\r\n * @param {array} composer Composer field array of Composer Items\r\n * @param {object} mappers A keyed object with each key matching the Composer Item \"type\"\r\n * @returns {array} Array of mapped objects transformed using a matched Composer Item \"type\" mapping\r\n * or null. Injects a \"_type\" property into each transformed object in the array to indicate\r\n * where the mapping originated and for what component the mapped object is representing\r\n */\r\nexport const useComposerMapper = <\r\n  S extends { type: string; value: any },\r\n  T extends Mappers<S>\r\n>(\r\n  composer: S[] = [],\r\n  mappers: T\r\n) => mapComposer(composer, mappers);\r\n\r\n/**\r\n * entryMapper will return a function to satisfy an entryMapper when defining app route\r\n * this is essentially a shorthand function to prevent boilerplate repetition inside your routes file\r\n * you do not need to use this function should you wish to map your entry via raw JS functions\r\n * @param mapping the jsonpath-mapper mapping template to apply when the route is resolved\r\n * @returns {mappedEntry}\r\n */\r\nexport const entryMapper =\r\n  (\r\n    mapping:\r\n      | MappingTemplate<RouteNode & Entry & { state?: AppState }>\r\n      | PureJsFunction<RouteNode & Entry & { state?: AppState }>\r\n  ): EntryMapper =>\r\n  (node, state) =>\r\n    mapJson({ ...node, ...(node.entry || ({} as Entry)), state }, mapping);\r\n\r\nexport default mapJson;\r\n"],"names":["stringifyStrings","obj","returnObj","Array","isArray","Object","entries","forEach","key","value","JSON","stringify","module","url","alias","project","projectAndAlias","toLowerCase","api","cms","liveWeb","previewWeb","iisWeb","iisPreviewWeb","useMapper","json","template","mapJson","chooseMapperByFieldValue","entry","mappers","field","fieldValue","jpath","default","useEntriesMapper","mapper","useEntryMapper","mapEntries","map","mapComposer","composer","composerItem","index","itemValue","type","addedFields","_type","_index","sourceObject","iv","idx","$root","mappedFields","useComposerMapper","entryMapper","mapping","node","state"],"mappings":"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"}
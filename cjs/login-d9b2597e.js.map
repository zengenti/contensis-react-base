{"version":3,"file":"login-d9b2597e.js","sources":["../src/routing/util/find-contenttype-mapping.ts","../src/user/transformations/mapClientCredentials.js","../src/user/util/ContensisManagementApi.js","../src/user/util/CookieHelper.class.ts","../src/user/util/OidcUserManager.ts","../src/user/util/LoginHelper.class.js","../src/user/redux/sagas/login.js"],"sourcesContent":["import { ContentTypeMapping } from '../routes';\n\nexport const findContentTypeMapping = (\n  ContentTypeMappings: ContentTypeMapping[],\n  contentTypeId: string\n) => ContentTypeMappings.find(ct => ct.contentTypeID === contentTypeId);\n","import { mapJson } from '~/util/json-mapper';\n\nconst clientCredentials = {\n  bearerToken: 'bearerToken',\n  bearerTokenExpiryDate: ({ bearerTokenExpiryDate }) =>\n    bearerTokenExpiryDate.toISOString(),\n  refreshToken: 'refreshToken',\n  refreshTokenExpiryDate: ({ refreshTokenExpiryDate }) =>\n    refreshTokenExpiryDate.toISOString(),\n  contensisClassicToken: 'contensisClassicToken',\n};\nexport default obj => mapJson(obj, clientCredentials);\n","// import { Client } from 'contensis-management-api';\n\nexport const getManagementApiClient = async ({\n  bearerToken,\n  bearerTokenExpiryDate,\n  refreshToken,\n  refreshTokenExpiryDate,\n  contensisClassicToken,\n  username,\n  password,\n}) => {\n  const rootUrl = SERVERS.api || SERVERS.cms; /* global SERVERS */\n  const projectId = PROJECTS[0].id; /* global PROJECTS */\n\n  let config = {};\n  if (refreshToken) {\n    config = {\n      clientType: 'contensis_classic_refresh_token',\n      clientDetails: {\n        refreshToken,\n      },\n    };\n  } else {\n    config = {\n      clientType: 'contensis_classic',\n      clientDetails: {\n        username,\n        password,\n      },\n    };\n  }\n  const { Client } = await import('contensis-management-api');\n\n  const client = Client.create({\n    ...config,\n    projectId,\n    rootUrl,\n  });\n\n  if (bearerToken) client.bearerToken = bearerToken;\n  if (bearerTokenExpiryDate)\n    client.bearerTokenExpiryDate = bearerTokenExpiryDate;\n  if (refreshToken) client.refreshToken = refreshToken;\n  if (refreshTokenExpiryDate)\n    client.refreshTokenExpiryDate = refreshTokenExpiryDate;\n  if (contensisClassicToken)\n    client.contensisClassicToken = contensisClassicToken;\n\n  return client;\n};\n","import JSCookie from 'js-cookie';\n\nconst COOKIE_VALID_DAYS = 1; // 0 = Session cookie\n\n// Override the default js-cookie conversion / encoding\n// methods so the written values work with Contensis sites\nconst Cookies = JSCookie.withConverter({\n  read: value => decodeURIComponent(value),\n  write: value => encodeURIComponent(value),\n});\n\nexport class CookieHelper {\n  static GetCookie(name) {\n    const cookie = Cookies.get(name);\n    if (typeof cookie === 'undefined') {\n      return null;\n    }\n    return cookie;\n  }\n\n  static SetCookie(name, value, maxAgeDays = COOKIE_VALID_DAYS) {\n    if (maxAgeDays === 0) Cookies.set(name, value);\n    else Cookies.set(name, value, { expires: maxAgeDays });\n  }\n\n  static DeleteCookie(name) {\n    Cookies.remove(name);\n  }\n}\n","import { UserManagerSettings } from 'oidc-client';\n\nconst context = (\n  typeof window != 'undefined' ? window : global\n) as typeof globalThis & {\n  WSFED_LOGIN: string;\n};\n\nconst requireOidc =\n  process.env.NODE_ENV === 'development'\n    ? WSFED_LOGIN === 'true' /* global WSFED_LOGIN */\n    : context.WSFED_LOGIN === 'true';\n\nconst servers = SERVERS; /* global SERVERS */\n\nexport const userManagerConfig =\n  typeof window !== 'undefined'\n    ? {\n        authority: `${servers.cms}/authenticate/`,\n        client_id: 'WebsiteAdfsClient',\n        redirect_uri: window.location.toString(),\n        post_logout_redirect_uri: window.location.toString(),\n        response_type: 'id_token',\n        scope: 'openid',\n        filterProtocolClaims: false,\n      }\n    : {};\n\nexport const createUserManager = async (config: UserManagerSettings) => {\n  if (typeof window !== 'undefined' && requireOidc) {\n    try {\n      const { UserManager } = await import(\n        /* webpackChunkName: \"oidcclient\" */ 'oidc-client'\n      );\n      return new UserManager(config);\n    } catch (e) {\n      console.error('Exception in createUserManager: ', e);\n    }\n  } else return {};\n};\n","/* eslint-disable require-atomic-updates */\nimport { getManagementApiClient } from './ContensisManagementApi';\nimport { to } from 'await-to-js';\n\nimport { CookieHelper } from './CookieHelper.class';\n\nimport mapClientCredentials from '../transformations/mapClientCredentials';\nimport { createUserManager, userManagerConfig } from './OidcUserManager';\n\nconst LOGIN_COOKIE = 'ContensisCMSUserName';\nconst REFRESH_TOKEN_COOKIE = 'RefreshToken';\n\nconst context = typeof window != 'undefined' ? window : global;\n\nexport class LoginHelper {\n  static CMS_URL = SERVERS.cms /* global SERVERS */;\n  static WSFED_LOGIN =\n    process.env.NODE_ENV === 'development'\n      ? WSFED_LOGIN === 'true' /* global WSFED_LOGIN */\n      : context.WSFED_LOGIN === 'true';\n  static LOGIN_ROUTE = '/account/login';\n  static ACCESS_DENIED_ROUTE = '/account/access-denied';\n  static IS_TWO_FA =\n    typeof TWO_FACTOR_AUTH === 'undefined'\n      ? false\n      : TWO_FACTOR_AUTH; /* global TWO_FACTOR_AUTH */\n\n  static SetLoginCookies({ contensisClassicToken, refreshToken }) {\n    console.info(\n      'SetLoginCookies:',\n      LOGIN_COOKIE,\n      contensisClassicToken,\n      REFRESH_TOKEN_COOKIE,\n      refreshToken\n    );\n    if (contensisClassicToken)\n      CookieHelper.SetCookie(LOGIN_COOKIE, contensisClassicToken);\n    if (refreshToken)\n      CookieHelper.SetCookie(REFRESH_TOKEN_COOKIE, refreshToken);\n  }\n\n  static GetCachedCredentials() {\n    return {\n      bearerToken: null,\n      bearerTokenExpiryDate: null,\n      refreshToken: CookieHelper.GetCookie(REFRESH_TOKEN_COOKIE),\n      refreshTokenExpiryDate: null,\n      contensisClassicToken: CookieHelper.GetCookie(LOGIN_COOKIE),\n    };\n  }\n\n  static ClearCachedCredentials() {\n    CookieHelper.DeleteCookie(LOGIN_COOKIE);\n    CookieHelper.DeleteCookie(REFRESH_TOKEN_COOKIE);\n\n    if (LoginHelper.WSFED_LOGIN && typeof window !== 'undefined') {\n      // remove any oidc keys left over in localStorage\n      const { localStorage } = window;\n      const keys = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (typeof key === 'string' && key.startsWith('oidc.'))\n          keys.push(localStorage.key(i));\n      }\n      keys.forEach(key => localStorage.removeItem(key));\n    }\n  }\n\n  static RequestTwoFaAuthToken = async username => {\n    const [error, res] = await to(\n      fetch(`/account/token`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n        }),\n      })\n    );\n\n    return [error, res];\n  };\n\n  static VerifyTwoFaAuthToken = async (username, token) => {\n    const [error, res] = await to(\n      fetch(`/account/token/verify`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          token,\n        }),\n      }).then(res => res.json())\n    );\n\n    return [error, res];\n  };\n\n  static async LoginUserTwoFactorAuth({\n    username,\n    password,\n    clientCredentials,\n    userIn,\n    twoFaToken,\n  }) {\n    let authenticationState = {\n      clientCredentials: null,\n      isAuthenticated: false,\n      isAuthenticationError: false,\n      isError: false,\n    };\n    let transientClient;\n    let user = userIn;\n    let credentials = clientCredentials;\n\n    if (user && credentials && twoFaToken) {\n      const [authTokenError, authTokenResponse] =\n        await LoginHelper.VerifyTwoFaAuthToken(user.username, twoFaToken);\n\n      if (authTokenResponse?.isTokenValid) {\n        LoginHelper.SetLoginCookies(clientCredentials);\n        authenticationState = {\n          requiresTwoFa: false,\n          clientCredentials: clientCredentials,\n          isAuthenticated: true,\n          isAuthenticationError: false,\n          isError: false,\n        };\n      } else {\n        const errorMessage =\n          authTokenError || authTokenResponse?.error || 'Unknown error';\n        authenticationState = {\n          requiresTwoFa: true,\n          clientCredentials: clientCredentials,\n          errorMessage,\n          isAuthenticated: false,\n          isAuthenticationError: false,\n          isError: true,\n        };\n        LoginHelper.ClearCachedCredentials();\n        // eslint-disable-next-line no-console\n        console.log('Error verifying 2fa token: ', errorMessage);\n      }\n    } else if (username && password) {\n      // Get a management client with username and password\n      transientClient = await getManagementApiClient({\n        username,\n        password,\n      });\n\n      // Ensure the client has requested a bearer token\n      const [loginError, clientBearerToken] = await to(\n        transientClient.ensureBearerToken()\n      );\n\n      // Problem getting token with username and password\n      if (loginError) {\n        authenticationState = {\n          clientCredentials: null,\n          errorMessage: loginError.message || null,\n          isAuthenticated: false,\n          isAuthenticationError: loginError.name.includes(\n            'ContensisAuthenticationError'\n          ),\n          isError: true,\n        };\n        LoginHelper.ClearCachedCredentials();\n      }\n\n      // Got a token using username and password\n      if (clientBearerToken) {\n        // Next, we need to request the 2fa token\n        const [tokenError] = await LoginHelper.RequestTwoFaAuthToken(username);\n        if (tokenError) {\n          // eslint-disable-next-line no-console\n          console.log(`Error requesting two-factor auth token: ${tokenError}`);\n          authenticationState = {\n            clientCredentials: null,\n            errorMessage: tokenError || null,\n            isAuthenticated: false,\n            isAuthenticationError: false,\n            isError: true,\n          };\n          LoginHelper.ClearCachedCredentials();\n        } else {\n          // If we have successfully generated a 2fa token, get the user details next\n          const [userDetailsError, userDetails] =\n            await LoginHelper.GetUserDetails(transientClient);\n\n          if (userDetailsError) {\n            authenticationState = {\n              clientCredentials: null,\n              errorMessage: userDetailsError.message,\n              isAuthenticated: false,\n              isAuthenticationError: false,\n              isError: true,\n            };\n            LoginHelper.ClearCachedCredentials();\n          } else {\n            user = userDetails;\n            const credentials = mapClientCredentials(transientClient);\n\n            authenticationState = {\n              requiresTwoFa: true,\n              clientCredentials: credentials,\n              errorMessage: null,\n              isAuthenticated: false,\n              isAuthenticationError: false,\n              isError: false,\n            };\n          }\n        }\n      }\n    } else if (credentials) {\n      const client =\n        transientClient || (await getManagementApiClient(credentials));\n      const [error, userDetails] = await LoginHelper.GetUserDetails(client);\n\n      if (error) {\n        authenticationState = {\n          clientCredentials: null,\n          errorMessage: error.message,\n          isAuthenticated: false,\n          isAuthenticationError: false,\n          isError: true,\n        };\n        LoginHelper.ClearCachedCredentials();\n      } else {\n        // Ensure we get latest refreshToken and contensisClassicToken from the latest client\n        const latestCredentials = mapClientCredentials(client);\n        LoginHelper.SetLoginCookies(latestCredentials);\n\n        user = userDetails;\n        authenticationState = {\n          clientCredentials: latestCredentials,\n          isAuthenticated: true,\n          isAuthenticationError: false,\n          isError: false,\n        };\n      }\n    }\n\n    return { authenticationState, user };\n  }\n\n  static async LoginUserRegular({ username, password, clientCredentials }) {\n    let credentials = clientCredentials;\n    let authenticationState = {\n      clientCredentials: null,\n      isAuthenticated: false,\n      isAuthenticationError: false,\n      isError: false,\n    };\n    let transientClient;\n    let user;\n\n    if (username && password) {\n      // Get a management client with username and password\n      transientClient = await getManagementApiClient({\n        username,\n        password,\n      });\n\n      // Ensure the client has requested a bearer token\n      const [loginError, clientBearerToken] = await to(\n        transientClient.ensureBearerToken()\n      );\n\n      // Problem getting token with username and password\n      if (loginError) {\n        authenticationState = {\n          clientCredentials: null,\n          errorMessage: loginError.message || null,\n          isAuthenticated: false,\n          isAuthenticationError: loginError.name.includes(\n            'ContensisAuthenticationError'\n          ),\n          isError: true,\n        };\n        LoginHelper.ClearCachedCredentials();\n      }\n\n      // Got a token using username and password\n      if (clientBearerToken) {\n        // Set credentials so we can continue to GetUserDetails\n        credentials = mapClientCredentials(transientClient);\n        LoginHelper.SetLoginCookies(credentials);\n        authenticationState = {\n          clientCredentials: credentials,\n          isAuthenticated: true,\n          isAuthenticationError: false,\n          isError: false,\n        };\n      }\n    }\n\n    // If we have credentials supplied by a successful username and password login\n    // or clientCredentials supplied in the options argument we can continue to\n    // fetch the user's details\n    if (credentials) {\n      const client =\n        transientClient || (await getManagementApiClient(credentials));\n      const [error, userDetails] = await LoginHelper.GetUserDetails(client);\n\n      if (error) {\n        authenticationState = {\n          clientCredentials: null,\n          errorMessage: error.message,\n          isAuthenticated: false,\n          isAuthenticationError: false,\n          isError: true,\n        };\n        LoginHelper.ClearCachedCredentials();\n      } else {\n        // Ensure we get latest refreshToken and contensisClassicToken from the latest client\n        const latestCredentials = mapClientCredentials(client);\n        LoginHelper.SetLoginCookies(latestCredentials);\n\n        user = userDetails;\n        authenticationState = {\n          clientCredentials: latestCredentials,\n          isAuthenticated: true,\n          isAuthenticationError: false,\n          isError: false,\n        };\n      }\n    }\n\n    return { authenticationState, user };\n  }\n\n  static async LoginUser({\n    username,\n    password,\n    clientCredentials,\n    userIn,\n    twoFaToken,\n  }) {\n    return LoginHelper.IS_TWO_FA\n      ? LoginHelper.LoginUserTwoFactorAuth({\n          username,\n          password,\n          clientCredentials,\n          userIn,\n          twoFaToken,\n        })\n      : LoginHelper.LoginUserRegular({\n          username,\n          password,\n          clientCredentials,\n        });\n  }\n\n  static GetUserDetails = async client => {\n    let userError,\n      groupsError,\n      user = {},\n      groupsResult;\n\n    [userError, user] = await to(client.security.users.getCurrent());\n    if (user && user.id) {\n      [groupsError, groupsResult] = await to(\n        client.security.users.getUserGroups({\n          userId: user.id,\n          includeInherited: true,\n          pageOptions: { pageSize: 100 },\n        })\n      );\n      // Set groups attribute in user object to be the items\n      // array from the getUserGroups result\n      if (groupsResult && groupsResult.items) user.groups = groupsResult.items;\n\n      //If groups call fails then log the error but allow the user to login still\n      // eslint-disable-next-line no-console\n      if (groupsError) console.log(groupsError);\n    }\n    return [userError, user];\n  };\n\n  static LogoutUser(redirectPath) {\n    LoginHelper.ClearCachedCredentials();\n    if (LoginHelper.WSFED_LOGIN) {\n      LoginHelper.WsFedLogout(redirectPath);\n    } else {\n      if (redirectPath) LoginHelper.ClientRedirectToPath(redirectPath);\n      else LoginHelper.ClientRedirectToSignInPage();\n    }\n  }\n\n  static ClientRedirectToHome(location) {\n    if (typeof window != 'undefined') {\n      let url = '/';\n      if (location) {\n        const { search, hash } = location;\n        url = search ? `${url}${search}` : url;\n        url = hash ? `${url}${hash}` : url;\n      }\n      window.location.href = url;\n    }\n  }\n\n  static async ClientRedirectToSignInPage(redirectPath) {\n    if (LoginHelper.WSFED_LOGIN) {\n      await LoginHelper.WsFedLogout();\n      await LoginHelper.WsFedLogin();\n    } else {\n      // Standard Contensis Login\n      let url = LoginHelper.LOGIN_ROUTE;\n      if (typeof redirectPath === 'string')\n        url = `${url}?redirect_uri=${redirectPath}`;\n      if (\n        typeof location !== 'undefined' &&\n        redirectPath !== LoginHelper.LOGIN_ROUTE\n      )\n        location.replace(url);\n    }\n  }\n\n  static ClientRedirectToAccessDeniedPage(originalPath) {\n    let url = LoginHelper.ACCESS_DENIED_ROUTE;\n    if (originalPath === url) return;\n\n    if (typeof originalPath === 'string')\n      url = `${url}?original_uri=${originalPath}`;\n    if (typeof location !== 'undefined') location.href = url;\n  }\n\n  static ClientRedirectToPath(redirectPath) {\n    if (typeof redirectPath === 'string') {\n      if (typeof location !== 'undefined') window.location.href = redirectPath;\n    } else LoginHelper.ClientRedirectToHome();\n  }\n\n  static async WsFedLogin(redirectUri) {\n    const userManager = await createUserManager(userManagerConfig);\n    userManager.signinRedirect({\n      scope: 'openid',\n      response_type: 'id_token',\n      redirect_uri: redirectUri || window.location.toString(),\n    });\n  }\n\n  static RemoveSecurityTokenQuery() {\n    const params = new URLSearchParams(window.location.search);\n    if (params.has('securitytoken') || params.has('securityToken')) {\n      params.delete('securitytoken');\n      params.delete('securityToken');\n      window.location = `${window.location.pathname}${\n        params.toString() ? `?${params}` : ''\n      }`;\n    }\n  }\n\n  static async WsFedLogout(redirectPath) {\n    await fetch(\n      `${LoginHelper.CMS_URL}/authenticate/logout?jsonResponseRequired=true`,\n      {\n        credentials: 'include',\n      }\n    );\n    if (redirectPath) {\n      window.location = redirectPath;\n    } else {\n      // Explicitly check and remove any stale\n      // security token that may be in the query string\n      LoginHelper.RemoveSecurityTokenQuery();\n    }\n  }\n\n  static async GetCredentialsForSecurityToken(securityToken) {\n    const [error, response] = await to(\n      fetch(`${LoginHelper.CMS_URL}/REST/Contensis/Security/IsAuthenticated`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          securityToken: encodeURIComponent(securityToken),\n        }),\n      })\n    );\n    if (error) return [{ message: 'Failed to fetch credentials' }];\n    if (response.ok) {\n      const [parseError, body] = await to(response.json());\n      if (parseError) return [parseError];\n\n      const { LogonResult, ApplicationData = [] } = body;\n      if (LogonResult !== 0) {\n        return [\n          { message: 'Security token is invalid', data: ApplicationData },\n        ];\n      }\n      if (ApplicationData.length > 0) {\n        let refreshToken;\n        ApplicationData.forEach(item => {\n          if (item.Key === 'ContensisSecurityRefreshToken')\n            refreshToken = item.Value;\n        });\n        if (!refreshToken) {\n          return [\n            {\n              message:\n                'Fetch credentials: Unable to find ContensisSecurityRefreshToken',\n            },\n          ];\n        }\n        return [undefined, refreshToken];\n      } else {\n        return [\n          {\n            message:\n              'Fetch credentials: Unable to find ContensisSecurityRefreshToken',\n          },\n        ];\n      }\n    } else {\n      return [\n        {\n          message: `Fetch credentials error: ${response.status} ${response.statusText}`,\n        },\n      ];\n    }\n  }\n\n  // static isZengentiStaff(email) {\n  //   const emailRefs = ['@zengenti', '@contensis'];\n\n  //   return emailRefs.some(emailRef => {\n  //     if (email.includes(emailRef)) {\n  //       return true;\n  //     }\n  //   });\n  // }\n}\n","import { takeEvery, select, put, call } from 'redux-saga/effects';\nimport {\n  SET_AUTHENTICATION_STATE,\n  LOGIN_USER,\n  LOGOUT_USER,\n  VALIDATE_USER,\n  VERIFY_TWO_FA_TOKEN,\n} from '../types';\nimport {\n  selectUserIsAuthenticated,\n  selectClientCredentials,\n  selectUserGroups,\n  selectUser,\n} from '../selectors';\n\nimport { setRoute } from '~/routing/redux/actions';\nimport { selectCurrentSearch } from '~/routing/redux/selectors';\nimport { findContentTypeMapping } from '~/routing/util/find-contenttype-mapping';\n\nimport mapClientCredentials from '~/user/transformations/mapClientCredentials';\n\nimport { getManagementApiClient } from '~/user/util/ContensisManagementApi';\nimport { LoginHelper } from '~/user/util/LoginHelper.class';\nimport { matchUserGroup } from '~/user/util/matchGroups';\nimport { queryParams } from '~/util/navigation';\n\nexport const loginSagas = [\n  takeEvery(LOGIN_USER, loginUserSaga),\n  takeEvery(VERIFY_TWO_FA_TOKEN, verifyTwoFaTokenSaga),\n  takeEvery(LOGOUT_USER, logoutUserSaga),\n  takeEvery(VALIDATE_USER, validateUserSaga),\n  takeEvery(SET_AUTHENTICATION_STATE, redirectAfterSuccessfulLoginSaga),\n];\n\nexport function* handleRequiresLoginSaga(action) {\n  const {\n    entry,\n    requireLogin,\n    routes: { ContentTypeMappings },\n    staticRoute,\n  } = action;\n  let userLoggedIn = yield select(selectUserIsAuthenticated);\n\n  // Check for a securityToken in querystring\n  const currentQs = queryParams(yield select(selectCurrentSearch));\n  const securityToken = currentQs.securityToken || currentQs.securitytoken;\n\n  // Check if any of the defined routes have \"requireLogin\" attribute\n  const { requireLogin: authRoute } = (staticRoute && staticRoute.route) || {};\n  const { requireLogin: authContentType } =\n    (entry &&\n      findContentTypeMapping(ContentTypeMappings, entry?.sys?.contentTypeId)) ||\n    {};\n\n  // If requireLogin, authRoute or authContentType has been specified as an\n  // array of groups we can merge all the arrays and match on any group supplied\n  const routeRequiresGroups = [\n    ...((Array.isArray(authContentType) && authContentType) || []),\n    ...((Array.isArray(authRoute) && authRoute) || []),\n    ...((Array.isArray(requireLogin) && requireLogin) || []),\n  ];\n  const routeRequiresLogin = !!authContentType || !!authRoute || !!requireLogin;\n\n  if (!userLoggedIn) {\n    // If cookies or securityToken are found on any route change\n    // always validate and login the user\n    if (routeRequiresLogin) {\n      // If routeRequiresLogin do a blocking call that returns userLoggedIn\n      userLoggedIn = yield call(validateUserSaga, { securityToken });\n    }\n    // otherwise do a non blocking put to handle validation in the background\n    else yield put({ type: VALIDATE_USER, securityToken });\n  }\n\n  if (routeRequiresLogin) {\n    // If a security token is in the querystring and we are not already\n    // logged in something is wrong and we won't bother going on another redirect loop\n    if (!userLoggedIn && !securityToken) {\n      LoginHelper.ClientRedirectToSignInPage(action.location.pathname);\n    } else if (routeRequiresGroups.length > 0) {\n      const userGroups = yield select(selectUserGroups, 'js');\n      const groupMatch = matchUserGroup(userGroups, routeRequiresGroups);\n\n      if (!groupMatch)\n        LoginHelper.ClientRedirectToAccessDeniedPage(action.location.pathname);\n    }\n  }\n}\n\nfunction* validateUserSaga({ securityToken }) {\n  // Check for refreshToken in cookies\n  let clientCredentials = LoginHelper.GetCachedCredentials();\n\n  if (securityToken || clientCredentials.refreshToken) {\n    // We only attempt to validate the user if one of the stored\n    // tokens are found, in this case we set loading state manually\n    // so we don't need to set and unset loading if there are no stored\n    yield put({\n      type: SET_AUTHENTICATION_STATE,\n      authenticationState: {\n        isLoading: true,\n      },\n    });\n    // If we have just a security token we will call a CMS endpoint\n    // and provide us with a RefreshToken cookie we can use during login\n    const [error, refreshToken] =\n      yield LoginHelper.GetCredentialsForSecurityToken(securityToken);\n    if (refreshToken) {\n      // Set cookies and reload values\n      LoginHelper.SetLoginCookies({\n        contensisClassicToken: securityToken,\n        refreshToken,\n      });\n      clientCredentials = LoginHelper.GetCachedCredentials();\n    }\n\n    // Log the user in if a refreshToken is found\n    if (clientCredentials.refreshToken)\n      yield call(loginUserSaga, { clientCredentials });\n    else if (error)\n      yield put({\n        type: SET_AUTHENTICATION_STATE,\n        authenticationState: {\n          isError: true,\n          errorMessage:\n            error?.message ||\n            (error && 'toString' in error && error.toString()),\n        },\n      });\n  }\n\n  // Tell any callers have we successfully logged in?\n  return yield select(selectUserIsAuthenticated);\n}\n\nfunction* loginUserSaga(action = {}) {\n  const { username, password, clientCredentials } = action;\n\n  // If a WSFED_LOGIN site has dispatched the loginUser action\n  // just redirect them to the Identity Provider sign in\n  if (action.type === LOGIN_USER && LoginHelper.WSFED_LOGIN)\n    LoginHelper.ClientRedirectToSignInPage();\n\n  const { authenticationState, user } = yield LoginHelper.LoginUser({\n    username,\n    password,\n    clientCredentials,\n  });\n\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    authenticationState,\n    user,\n  });\n}\n\nfunction* verifyTwoFaTokenSaga(action = {}) {\n  const { twoFaToken } = action;\n  const userIn = yield select(selectUser);\n  const clientCredentials = yield select(selectClientCredentials);\n\n  const { authenticationState, user } = yield LoginHelper.LoginUser({\n    clientCredentials,\n    userIn,\n    twoFaToken,\n  });\n\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    authenticationState,\n    user,\n  });\n}\n\nconst removeHostnamePart = path => {\n  // eslint-disable-next-line no-console\n  console.log(path);\n  const relativePath = '/' + path.split('/').splice(3).join('/');\n  // eslint-disable-next-line no-console\n  console.log(relativePath);\n  return relativePath;\n};\n\nfunction* redirectAfterSuccessfulLoginSaga() {\n  const isLoggedIn = yield select(selectUserIsAuthenticated);\n  const { redirect_uri: redirectPath, ReturnURL: assetRedirectPath } =\n    queryParams(yield select(selectCurrentSearch));\n\n  if (isLoggedIn && assetRedirectPath && typeof window != 'undefined') {\n    const path = removeHostnamePart(assetRedirectPath);\n    // This has to be a hard href to get the app to\n    // leave React and hit the server for the IIS hosted assets\n    window.location.href = path;\n    // yield put(setRoute(path)); // does not work in this scenario\n  } else if (isLoggedIn && redirectPath) {\n    yield put(setRoute(redirectPath));\n  }\n}\n\nfunction* logoutUserSaga({ redirectPath }) {\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    user: null,\n  });\n  yield LoginHelper.LogoutUser(redirectPath);\n}\n\nexport function* refreshSecurityToken() {\n  const clientCredentials = yield select(selectClientCredentials, 'js');\n  if (Object.keys(clientCredentials).length > 0) {\n    const client = yield getManagementApiClient(clientCredentials);\n    yield client.authenticate();\n\n    yield put({\n      type: SET_AUTHENTICATION_STATE,\n      authenticationState: {\n        clientCredentials: mapClientCredentials(client),\n      },\n    });\n  }\n}\n"],"names":["findContentTypeMapping","ContentTypeMappings","contentTypeId","find","ct","contentTypeID","clientCredentials","bearerToken","bearerTokenExpiryDate","toISOString","refreshToken","refreshTokenExpiryDate","contensisClassicToken","obj","mapJson","getManagementApiClient","username","password","rootUrl","SERVERS","api","cms","projectId","PROJECTS","id","config","clientType","clientDetails","Client","client","create","COOKIE_VALID_DAYS","Cookies","JSCookie","withConverter","read","value","decodeURIComponent","write","encodeURIComponent","CookieHelper","GetCookie","name","cookie","get","SetCookie","maxAgeDays","set","expires","DeleteCookie","remove","context","window","global","requireOidc","process","env","NODE_ENV","WSFED_LOGIN","servers","userManagerConfig","authority","client_id","redirect_uri","location","toString","post_logout_redirect_uri","response_type","scope","filterProtocolClaims","createUserManager","UserManager","e","console","error","LOGIN_COOKIE","REFRESH_TOKEN_COOKIE","LoginHelper","SetLoginCookies","info","GetCachedCredentials","ClearCachedCredentials","localStorage","keys","i","length","key","startsWith","push","forEach","removeItem","LoginUserTwoFactorAuth","userIn","twoFaToken","authenticationState","isAuthenticated","isAuthenticationError","isError","transientClient","user","credentials","authTokenError","authTokenResponse","VerifyTwoFaAuthToken","isTokenValid","requiresTwoFa","errorMessage","log","loginError","clientBearerToken","to","ensureBearerToken","message","includes","tokenError","RequestTwoFaAuthToken","userDetailsError","userDetails","GetUserDetails","mapClientCredentials","latestCredentials","LoginUserRegular","LoginUser","IS_TWO_FA","LogoutUser","redirectPath","WsFedLogout","ClientRedirectToPath","ClientRedirectToSignInPage","ClientRedirectToHome","url","search","hash","href","WsFedLogin","LOGIN_ROUTE","replace","ClientRedirectToAccessDeniedPage","originalPath","ACCESS_DENIED_ROUTE","redirectUri","userManager","signinRedirect","RemoveSecurityTokenQuery","params","URLSearchParams","has","delete","pathname","fetch","CMS_URL","GetCredentialsForSecurityToken","securityToken","response","method","headers","Accept","body","JSON","stringify","ok","parseError","json","LogonResult","ApplicationData","data","item","Key","Value","undefined","status","statusText","TWO_FACTOR_AUTH","res","token","then","userError","groupsError","groupsResult","security","users","getCurrent","getUserGroups","userId","includeInherited","pageOptions","pageSize","items","groups","loginSagas","takeEvery","LOGIN_USER","loginUserSaga","VERIFY_TWO_FA_TOKEN","verifyTwoFaTokenSaga","LOGOUT_USER","logoutUserSaga","VALIDATE_USER","validateUserSaga","SET_AUTHENTICATION_STATE","redirectAfterSuccessfulLoginSaga","handleRequiresLoginSaga","action","_entry$sys","entry","requireLogin","routes","staticRoute","userLoggedIn","select","selectUserIsAuthenticated","currentQs","queryParams","selectCurrentSearch","securitytoken","authRoute","route","authContentType","sys","routeRequiresGroups","Array","isArray","routeRequiresLogin","call","put","type","userGroups","selectUserGroups","groupMatch","matchUserGroup","isLoading","selectUser","selectClientCredentials","removeHostnamePart","path","relativePath","split","splice","join","isLoggedIn","ReturnURL","assetRedirectPath","setRoute","refreshSecurityToken","Object","authenticate"],"mappings":"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"}
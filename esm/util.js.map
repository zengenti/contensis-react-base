{"version":3,"file":"util.js","sources":["../src/util/json-mapper.ts","../src/util/stringifyStrings.js","../src/app/pages/VersionInfo/transformations/state-to-versioninfoprops.mapper.ts","../src/app/pages/VersionInfo/components/VersionInfo.styled.tsx","../src/app/pages/VersionInfo/components/VersionInfo.tsx"],"sourcesContent":["import { Entry } from 'contensis-delivery-api/lib/models';\nimport mapJson, { jpath } from 'jsonpath-mapper';\nimport MappingTemplate, {\n  PureJsFunction,\n} from 'jsonpath-mapper/dist/models/Template';\nimport { AppState } from '~/redux/appstate';\nimport { EntryMapper, RouteNode } from '~/routing/routes';\n\nexport { default as mapJson, jpath } from 'jsonpath-mapper';\n\ntype Mappers<S> = { [contentTypeId: string]: MappingTemplate<S> };\n\n/**\n *\n * @param {object} json The source object we wish to transform\n * @param {object} template The mapping template we wish to apply to the source\n * object to generate the intended target object\n */\nexport const useMapper = <T, S>(json: S, template: MappingTemplate<S>) => {\n  return template ? (mapJson((json || {}) as S, template) as T) : json;\n};\n\nconst chooseMapperByFieldValue = <S, T extends Mappers<S>>(\n  entry: S,\n  mappers: T,\n  field = 'sys.contentTypeId'\n) => {\n  const fieldValue = jpath(field, entry || {}) as string;\n  return (mappers[fieldValue] || mappers.default || {}) as T[keyof T];\n};\n\n/**\n * useEntriesMapper hook to take a list of entries from Delivery API along\n * with mappers for each contentTypeId and return an array of mapped objects\n * @param {any} entry The source entry we wish to transform\n * @param {object} mappers Object with keys containing mapper templates,\n * the key name matching sys.contentTypeId\n * @param {string} field Only include if we need to match content based on\n * a field other than sys.contentTypeId in the source data\n * @returns {object} Object transformed using a matched content type or\n * a default mapper template, returns an empty object if no mapper template\n * couild be applied.\n */\nexport const useEntriesMapper = <S, T extends Mappers<S>>(\n  entry: S,\n  mappers: T,\n  field = 'sys.contentTypeId'\n) => {\n  const mapper = chooseMapperByFieldValue(entry, mappers, field);\n  return useMapper(entry, mapper);\n};\n\n/**\n * Deprecated: due to misleading name, use the hook useEntriesMapper instead\n */\nexport const useEntryMapper = useEntriesMapper;\n\n/**\n * mapEntries mapping function to take a list of entries from Delivery API along\n * with mappers for each contentTypeId and return an array of mapped objects\n * @param {any} entry The source entry we wish to transform\n * @param {object} mappers Object with keys containing mapper templates,\n * the key name matching sys.contentTypeId\n * @param {string} field Only include if we need to match content based on\n * a field other than sys.contentTypeId in the source data\n * @returns {object} Object transformed using a matched content type or\n * a default mapper template, returns an empty object if no mapper template\n * couild be applied.\n */\nexport const mapEntries = <\n  S,\n  Mappers extends { [contentTypeId: string]: MappingTemplate<S> }\n>(\n  entries: S[],\n  mappers: Mappers,\n  field = 'sys.contentTypeId'\n) =>\n  entries.map(entry => {\n    const mapper = chooseMapperByFieldValue(entry, mappers, field);\n    return mapper ? mapJson((entry || {}) as S, mapper) : entry;\n  });\n\n/**\n * mapComposer mapping function to take a composer field from Delivery API along\n * with mappers for each Composer Item \"type\" and return an array of mapped components\n * @param {array} composer Composer field array of Composer Items\n * @param {object} mappers A keyed object with each key matching the Composer Item \"type\"\n * @returns {array} Array of mapped objects transformed using a matched Composer Item \"type\" mapping\n * or null. Injects a \"_type\" property into each transformed object in the array to indicate\n * where the mapping originated and for what component the mapped object is representing\n */\nexport const mapComposer = <\n  S extends { type: string; value: any },\n  T extends Mappers<S>\n>(\n  composer: S[],\n  mappers: T\n) =>\n  Array.isArray(composer)\n    ? composer.map((composerItem, index) => {\n        const itemValue = composerItem.value;\n        const mapper = mappers[composerItem.type] || mappers.default;\n        if (mapper) {\n          // Add some fields into the composer item mapper and return object\n          const addedFields = {\n            _type: composerItem.type,\n            _index: index,\n          };\n\n          // Add fields and $root item into the composer item source object\n          // for use inside each item mapping, for arrays we inject the added fields\n          // into the first array item. This is useful if we require any of\n          // composerItem.type, composerItem index/position and composer $root\n          // in scope to influence any composer item's mapping logic\n          const sourceObject =\n            itemValue && Array.isArray(itemValue)\n              ? itemValue.map((iv, idx) =>\n                  idx !== 0\n                    ? iv\n                    : typeof iv === 'object'\n                    ? { ...addedFields, ...iv, $root: composer }\n                    : iv\n                )\n              : typeof itemValue === 'object'\n              ? { ...addedFields, ...itemValue, $root: composer }\n              : itemValue || {};\n\n          // Apply the composer item mapping\n          const mappedFields = mapJson(sourceObject, mapper) as any;\n\n          // Add the extra fields in with the return object\n          return mappedFields && typeof mappedFields === 'object'\n            ? { ...mappedFields, ...addedFields }\n            : mappedFields;\n        } else return {};\n      })\n    : composer || [];\n\n/**\n * useComposerMapper hook to take a composer field from Delivery API along\n * with mappers for each Composer Item \"type\" and return an array of mapped components\n * @param {array} composer Composer field array of Composer Items\n * @param {object} mappers A keyed object with each key matching the Composer Item \"type\"\n * @returns {array} Array of mapped objects transformed using a matched Composer Item \"type\" mapping\n * or null. Injects a \"_type\" property into each transformed object in the array to indicate\n * where the mapping originated and for what component the mapped object is representing\n */\nexport const useComposerMapper = <\n  S extends { type: string; value: any },\n  T extends Mappers<S>\n>(\n  composer: S[] = [],\n  mappers: T\n) => mapComposer(composer, mappers);\n\n/**\n * entryMapper will return a function to satisfy an entryMapper when defining app route\n * this is essentially a shorthand function to prevent boilerplate repetition inside your routes file\n * you do not need to use this function should you wish to map your entry via raw JS functions\n * @param mapping the jsonpath-mapper mapping template to apply when the route is resolved\n * @returns {mappedEntry}\n */\nexport const entryMapper =\n  (\n    mapping:\n      | MappingTemplate<RouteNode & Entry & { state?: AppState }>\n      | PureJsFunction<RouteNode & Entry & { state?: AppState }>\n  ): EntryMapper =>\n  (node, state) =>\n    mapJson({ ...node, ...(node.entry || ({} as Entry)), state }, mapping);\n\nexport default mapJson;\n","const stringifyStrings = obj => {\n  const returnObj = Array.isArray(obj) ? [] : {};\n  Object.entries(obj).forEach(([key, value]) => {\n    switch (typeof value) {\n      case 'string':\n        returnObj[key] = JSON.stringify(value);\n        break;\n      case 'object':\n        returnObj[key] = stringifyStrings(value);\n        break;\n      default:\n        returnObj[key] = value;\n        break;\n    }\n  });\n  return returnObj;\n};\n\nmodule.exports = stringifyStrings;\n","import { default as mapJson } from '~/util/json-mapper';\nimport { selectCurrentProject } from '~/routing/redux/selectors';\nimport {\n  selectBuildNumber,\n  selectCommitRef,\n  selectVersionStatus,\n} from '~/redux/selectors/version';\nimport { IVersionInfoProps } from '../components/VersionInfo';\n\nconst context = (\n  typeof window != 'undefined' ? window : global\n) as typeof globalThis & {\n  DISABLE_SSR_REDUX: any;\n  PACKAGE_JSON: any;\n  PROJECTS: any;\n  PROXY_DELIVERY_API: any;\n  PUBLIC_URI: any;\n  REVERSE_PROXY_PATHS: string[];\n  SERVERS: any;\n};\n\nconst isDev = process.env.NODE_ENV === 'development';\n\nconst pj = () =>\n  isDev\n    ? PACKAGE_JSON /* global PACKAGE_JSON */\n    : context.PACKAGE_JSON || { name: 'packagejson not found', repository: '' };\n\nconst versionInfoProps = {\n  packageDetail: () => {\n    const pkg = pj();\n    return { name: pkg.name, version: pkg.version, repository: pkg.repository };\n  },\n  uris: {\n    gitRepo: () => pj().repository,\n    commit: state => {\n      const commitRef = selectCommitRef(state);\n      return `${pj().repository}/commit/${commitRef ? commitRef : ''}`;\n    },\n    pipeline: state => {\n      const buildNumber = selectBuildNumber(state);\n      return `${pj().repository}/${\n        pj().repository.includes('github.com') ? 'actions/runs' : 'pipelines'\n      }/${buildNumber ? buildNumber : ''}`;\n    },\n  },\n  zenPackageVersions: () => [\n    ...(Object.entries(pj().devDependencies || {}).filter(\n      ([pkg]) => pkg.includes('zengenti') || pkg.includes('contensis')\n    ) || []),\n    ...(Object.entries(pj().dependencies || {}).filter(\n      ([pkg]) => pkg.includes('zengenti') || pkg.includes('contensis')\n    ) || []),\n  ],\n  deliveryApi: () =>\n    JSON.parse(\n      JSON.stringify(DELIVERY_API_CONFIG /* global DELIVERY_API_CONFIG */)\n    ),\n  devEnv: () =>\n    typeof DEV_ENV !== 'undefined' /* global DEV_ENV */ ? DEV_ENV : null,\n  disableSsrRedux: () =>\n    isDev\n      ? DISABLE_SSR_REDUX /* global DISABLE_SSR_REDUX*/\n      : context.DISABLE_SSR_REDUX || false,\n  nodeEnv: () => process.env.NODE_ENV || 'production',\n  packagejson: () => pj() || {},\n  projects: () => (isDev ? PROJECTS /* global PROJECTS */ : context.PROJECTS),\n  proxyDeliveryApi: () =>\n    isDev\n      ? PROXY_DELIVERY_API /* global PROXY_DELIVERY_API */\n      : context.PROXY_DELIVERY_API || false,\n  publicUri: () =>\n    isDev ? PUBLIC_URI /* global PUBLIC_URI */ : context.PUBLIC_URI || null,\n  project: state => selectCurrentProject(state),\n  reverseProxyPaths: () =>\n    isDev\n      ? REVERSE_PROXY_PATHS /* global REVERSE_PROXY_PATHS */\n      : context.REVERSE_PROXY_PATHS || {},\n  servers: () => (isDev ? SERVERS /* global SERVERS */ : context.SERVERS),\n  version: {\n    buildNumber: state => selectBuildNumber(state),\n    commitRef: state => selectCommitRef(state),\n    contensisVersionStatus: state => selectVersionStatus(state),\n  },\n};\n\nconst mapStateToVersionInfo = state => {\n  const mappedProps = mapJson(state, versionInfoProps);\n  return mappedProps as IVersionInfoProps;\n};\n\nexport default mapStateToVersionInfo;\n","import styled from 'styled-components';\n\nexport const VersionInfoStyledTable = styled.table`\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n  font-size: 1.6rem;\n  line-height: 1.5rem;\n  border-bottom: 4px solid #8892bf;\n  border-collapse: separate;\n  margin: 0 auto;\n  width: 80%;\n  th {\n    text-align: left;\n    background-color: #c4c9df;\n    border-bottom: #8892bf 2px solid;\n    border-bottom-color: #8892bf;\n    border-top: 20px solid #fff;\n  }\n  td {\n    border-bottom: 1px solid #eee;\n  }\n  td,\n  th {\n    padding: 0.5rem 0.75rem;\n    vertical-align: top;\n  }\n  .left {\n    width: 25%;\n  }\n  tr th {\n    border-right: hidden;\n    border-spacing: 0 15px;\n  }\n  .green {\n    background-color: #9c9;\n    border-bottom: 1px solid #696;\n  }\n  .red {\n    background-color: #c99;\n    border-bottom: 1px solid #966;\n  }\n  .small {\n    font-size: 100%;\n    line-height: 2.4rem;\n  }\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport mapStateToVersionInfo from '../transformations/state-to-versioninfoprops.mapper';\n\nimport { VersionInfoStyledTable } from './VersionInfo.styled';\n\nexport interface IVersionInfoProps {\n  deliveryApi: {\n    rootUrl: string;\n    accessToken: string;\n    projectId: string;\n    livePublishingRootUrl: string;\n  };\n  devEnv: { [k: string]: string };\n  disableSsrRedux: boolean;\n  nodeEnv: string;\n  packageDetail: any;\n  project: string;\n  projects;\n  proxyDeliveryApi;\n  publicUri: string;\n  reverseProxyPaths: string[];\n  servers: {\n    alias: string;\n    api: string;\n    cms: string;\n    web: string;\n    iis: string;\n    previewIis: string;\n    previewWeb: string;\n  };\n  uris: {\n    gitRepo: string;\n    commit: string;\n    pipeline: string;\n  };\n  version: {\n    buildNumber: string;\n    commitRef: string;\n    contensisVersionStatus: string;\n  };\n  zenPackageVersions: string[];\n}\n\nconst VersionInfo = ({\n  deliveryApi,\n  devEnv,\n  disableSsrRedux,\n  nodeEnv,\n  packageDetail,\n  project,\n  projects,\n  proxyDeliveryApi,\n  publicUri,\n  reverseProxyPaths,\n  servers,\n  uris,\n  version,\n  zenPackageVersions,\n}: IVersionInfoProps) => {\n  return (\n    <VersionInfoStyledTable>\n      <thead>\n        <tr>\n          <td colSpan={2}>\n            <h1>\n              <a href=\"/\">Version Information</a>\n            </h1>\n          </td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th colSpan={2}>Package detail</th>\n        </tr>\n        <tr>\n          <td className=\"left\">Name</td>\n          <td>{packageDetail.name}</td>\n        </tr>\n        <tr>\n          <td className=\"left\">Version</td>\n          <td>{packageDetail.version}</td>\n        </tr>\n        <tr>\n          <th colSpan={2}>Version info (state)</th>\n        </tr>\n        <tr>\n          <td>Git repo url: </td>\n          <td>\n            <a\n              href={packageDetail.repository}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {packageDetail.repository}\n            </a>\n          </td>\n        </tr>\n        <tr>\n          <td>Pipeline: </td>\n          <td>\n            <a href={uris.pipeline} target=\"_blank\" rel=\"noopener noreferrer\">\n              {version.buildNumber}\n            </a>\n          </td>\n        </tr>\n        <tr>\n          <td>Commit: </td>\n          <td>\n            <a href={uris.commit} target=\"_blank\" rel=\"noopener noreferrer\">\n              {version.commitRef}\n            </a>\n          </td>\n        </tr>\n        {/* <tr>\n            <td>Last release ref: </td>\n            <td></td>\n          </tr>\n          <tr>\n            <td>Number of commits since last release: </td>\n            <td></td>\n          </tr> */}\n        <tr>\n          <td>Project</td>\n          <td className={project === 'unknown' ? 'red' : ''}>{project}</td>\n        </tr>\n        <tr>\n          <td>Contensis version status: </td>\n          <td\n            className={\n              version.contensisVersionStatus === 'published' ? 'green' : 'red'\n            }\n          >\n            {version.contensisVersionStatus}\n          </td>\n        </tr>\n        <tr>\n          <th colSpan={2}>Build configuration</th>\n        </tr>\n        <tr>\n          <td>Environment</td>\n          <td>{servers.alias}</td>\n        </tr>\n        <tr>\n          <td>Public uri</td>\n          <td>{publicUri}</td>\n        </tr>\n        <tr>\n          <td>Zengenti packages</td>\n          <td>\n            {zenPackageVersions.map(([pkg, ver], idx) => (\n              <div key={idx}>\n                {pkg}: {ver}\n              </div>\n            ))}\n          </td>\n        </tr>\n        <tr>\n          <td>Servers</td>\n          <td className=\"small\">\n            <div>web: {servers.web}</div>\n            <div>preview: {servers.previewWeb}</div>\n            <div>api: {servers.api}</div>\n            <div>cms: {servers.cms}</div>\n            <div>iis: {servers.iis}</div>\n            <div>iis preview: {servers.previewIis}</div>\n          </td>\n        </tr>\n        <tr>\n          <td>Reverse proxy paths</td>\n          <td>\n            {Object.entries(reverseProxyPaths).map(([, path], key) => (\n              <span key={key}>[ {path} ] </span>\n            ))}\n          </td>\n        </tr>\n        <tr>\n          <td>Projects</td>\n          <td>\n            {Object.entries(\n              projects as {\n                id: string;\n                publicUri: string;\n              }[]\n            ).map(([, project], key) => (\n              <div key={key}>\n                [ {project.id}: {project.publicUri} ]\n              </div>\n            ))}\n          </td>\n        </tr>\n        <tr>\n          <td>Delivery API</td>\n          <td className=\"small\">\n            <ul style={{ margin: 0, padding: 0 }}>\n              {Object.entries(deliveryApi).map(\n                ([key, value]: [string, any], idx) => {\n                  if (typeof value === 'object') return null;\n                  return (\n                    <li key={idx} style={{ listStyleType: 'none' }}>\n                      {key}: <span>{value}</span>\n                    </li>\n                  );\n                }\n              )}\n            </ul>\n          </td>\n        </tr>\n        <tr>\n          <td>Proxy Delivery API requests</td>\n          <td className={proxyDeliveryApi ? 'green' : 'red'}>\n            {proxyDeliveryApi.toString()}\n          </td>\n        </tr>\n        <tr>\n          <td>Disable SSR inline-redux</td>\n          <td>{disableSsrRedux.toString()}</td>\n        </tr>\n        <tr>\n          <td>NODE_ENV</td>\n          <td className={nodeEnv === 'production' ? 'green' : 'red'}>\n            {nodeEnv.toString()}\n          </td>\n        </tr>\n        {devEnv && (\n          <tr>\n            <td>process.env</td>\n            <td>\n              {Object.entries(devEnv).map(([k, v], key) => (\n                <div key={key}>\n                  [ {k}: {v} ]\n                </div>\n              ))}\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </VersionInfoStyledTable>\n  );\n};\n\nexport default connect(mapStateToVersionInfo)(VersionInfo);\n"],"names":["useMapper","json","template","mapJson","chooseMapperByFieldValue","entry","mappers","field","fieldValue","jpath","default","useEntriesMapper","mapper","useEntryMapper","mapEntries","entries","map","mapComposer","composer","Array","isArray","composerItem","index","itemValue","value","type","addedFields","_type","_index","sourceObject","iv","idx","$root","mappedFields","useComposerMapper","entryMapper","mapping","node","state","stringifyStrings","obj","returnObj","Object","forEach","key","JSON","stringify","module","context","window","global","isDev","process","env","NODE_ENV","pj","PACKAGE_JSON","name","repository","versionInfoProps","packageDetail","pkg","version","uris","gitRepo","commit","commitRef","selectCommitRef","pipeline","buildNumber","selectBuildNumber","includes","zenPackageVersions","devDependencies","filter","dependencies","deliveryApi","parse","DELIVERY_API_CONFIG","devEnv","DEV_ENV","disableSsrRedux","DISABLE_SSR_REDUX","nodeEnv","packagejson","projects","PROJECTS","proxyDeliveryApi","PROXY_DELIVERY_API","publicUri","PUBLIC_URI","project","selectCurrentProject","reverseProxyPaths","REVERSE_PROXY_PATHS","servers","SERVERS","contensisVersionStatus","selectVersionStatus","mapStateToVersionInfo","mappedProps","VersionInfoStyledTable","styled","table","VersionInfo","alias","ver","web","previewWeb","api","cms","iis","previewIis","path","id","margin","padding","listStyleType","toString","k","v","connect"],"mappings":"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"}
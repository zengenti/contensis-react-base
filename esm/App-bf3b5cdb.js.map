{"version":3,"file":"App-bf3b5cdb.js","sources":["../src/redux/store/history.js","../src/redux/sagas/navigation.js","../src/util/schema.ts","../src/routing/util/expressions.ts","../src/routing/util/queries.ts","../src/routing/redux/sagas.js","../src/user/redux/sagas/register.js","../src/user/util/userHelper.js","../src/user/redux/sagas/resetPassword.js","../src/user/redux/sagas/index.js","../src/redux/sagas/index.js","../src/util/pickProject.js","../src/app/App.tsx"],"sourcesContent":["import { createBrowserHistory, createMemoryHistory } from 'history';\n\n// Create a history depending on the environment\nconst selectedHistory =\n  typeof window !== 'undefined' ? createBrowserHistory : createMemoryHistory;\n\nexport const history = (options = {}) => selectedHistory(options);\nexport const browserHistory = selectedHistory();\n","import { takeEvery, put, select } from 'redux-saga/effects';\nimport * as log from 'loglevel';\n\nimport { deliveryApi } from '~/util/ContensisDeliveryApi';\nimport {\n  GET_NODE_TREE,\n  SET_NODE_TREE,\n  GET_NODE_TREE_ERROR,\n} from '~/redux/types/navigation';\nimport { hasNavigationTree } from '~/redux/selectors/navigation';\nimport { selectVersionStatus } from '~/redux/selectors/version';\nimport { selectCurrentProject } from '~/routing/redux/selectors';\n\nexport const navigationSagas = [takeEvery(GET_NODE_TREE, ensureNodeTreeSaga)];\n\nexport function* ensureNodeTreeSaga(action) {\n  const state = yield select();\n  try {\n    if (!hasNavigationTree(state)) {\n      const deliveryApiVersionStatus = yield select(selectVersionStatus);\n      const project = yield select(selectCurrentProject);\n      const nodes = yield deliveryApi\n        .getClient(deliveryApiVersionStatus, project)\n        .nodes.getRoot({\n          depth: action.treeDepth || 0,\n          language: action.language,\n        });\n      if (nodes) {\n        yield put({ type: SET_NODE_TREE, nodes });\n      } else {\n        yield put({ type: GET_NODE_TREE_ERROR });\n      }\n    }\n  } catch (ex) {\n    log.error(...['Error running ensureNodeTreeSaga:', ex]);\n    yield put({ type: GET_NODE_TREE_ERROR, error: ex.toString() });\n  }\n}\n","export const DataFormats = {\n  entry: 'entry',\n  webpage: 'webpage',\n};\n\nconst sys = {\n  contentTypeId: 'sys.contentTypeId',\n  dataFormat: 'sys.dataFormat',\n  filename: 'sys.properties.filename',\n  id: 'sys.id',\n  includeInSearch: 'sys.metadata.includeInSearch',\n  slug: 'sys.slug',\n  uri: 'sys.uri',\n  versionStatus: 'sys.versionStatus',\n};\n\nexport const Fields = {\n  entryTitle: 'entryTitle',\n  entryDescription: 'entryDescription',\n  keywords: 'keywords',\n  sys,\n  contentTypeId: 'sys.contentTypeId',\n  wildcard: '*',\n};\n\nexport const VersionStatus = {\n  published: 'published',\n  latest: 'latest',\n};\n","import { IExpression } from 'contensis-core-api';\nimport { Op } from 'contensis-delivery-api';\nimport { Fields } from '~/util/schema';\n\nexport const fieldExpression = (\n  field: string,\n  value: string | string[],\n  operator = 'equalTo',\n  weight = null\n) => {\n  if (!field || !value) return [];\n  if (Array.isArray(value)) return equalToOrIn(field, value, operator);\n  else\n    return !weight\n      ? [Op[operator](field, value)]\n      : [Op[operator](field, value).weight(weight)];\n};\n\nexport const defaultExpressions = (\n  versionStatus: 'published' | 'latest'\n): IExpression[] => {\n  return [Op.equalTo(Fields.sys.versionStatus, versionStatus)];\n};\n\nconst equalToOrIn = (field: string, arr: string[], operator = 'equalTo') =>\n  arr.length === 0\n    ? []\n    : arr.length === 1\n    ? [Op[operator](field, arr[0])]\n    : [Op.in(field, ...arr)];\n","import { VersionStatus } from 'contensis-core-api';\nimport { Query } from 'contensis-delivery-api';\nimport { fieldExpression, defaultExpressions } from './expressions';\n\nexport const routeEntryByFieldsQuery = (\n  id: string,\n  language = 'en-GB',\n  fields: string[] = [],\n  versionStatus: VersionStatus = 'published'\n) => {\n  const query = new Query(\n    ...[\n      ...fieldExpression('sys.id', id),\n      ...fieldExpression('sys.language', language),\n      ...defaultExpressions(versionStatus),\n    ]\n  );\n  query.fields = fields;\n  return query;\n};\n","import * as log from 'loglevel';\nimport { takeEvery, put, select, call, all } from 'redux-saga/effects';\n\nimport {\n  SET_ENTRY,\n  SET_ANCESTORS,\n  SET_NAVIGATION_PATH,\n  SET_ROUTE,\n  SET_SIBLINGS,\n  UPDATE_LOADING_STATE,\n} from './types';\nimport { GET_NODE_TREE } from '~/redux/types/navigation';\nimport {\n  selectCurrentAncestors,\n  selectCurrentNode,\n  selectCurrentProject,\n  selectCurrentSiblings,\n  selectMappedEntry,\n  selectRouteEntry,\n  selectRouteEntryEntryId,\n  selectRouteEntryLanguage,\n} from './selectors';\nimport { hasNavigationTree } from '~/redux/selectors/navigation';\nimport { selectVersionStatus } from '~/redux/selectors/version';\nimport { ensureNodeTreeSaga } from '~/redux/sagas/navigation';\nimport { handleRequiresLoginSaga } from '~/user/redux/sagas/login';\n\nimport { findContentTypeMapping } from '../util/find-contenttype-mapping';\nimport { routeEntryByFieldsQuery } from '../util/queries';\nimport { cachedSearch, deliveryApi } from '~/util/ContensisDeliveryApi';\nimport { injectRedux as reduxInjector } from '~/redux/store/injectors';\n\nexport const routingSagas = [\n  takeEvery(SET_NAVIGATION_PATH, getRouteSaga),\n  takeEvery(SET_ROUTE, setRouteSaga),\n];\n\n/**\n * To navigate / push a specific route via redux middleware\n * @param {path, state} action\n */\nfunction* setRouteSaga(action) {\n  yield put({\n    type: 'CALL_HISTORY_METHOD',\n    payload: {\n      method: 'push',\n      args: [action.path, action.state],\n    },\n  });\n}\n\nfunction* getRouteSaga(action) {\n  let entry = null;\n  try {\n    const {\n      withEvents,\n      routes: { ContentTypeMappings = {} } = {},\n      staticRoute,\n    } = action;\n\n    // Inject redux { key, reducer, saga } provided by staticRoute\n    if (staticRoute && staticRoute.route.injectRedux)\n      yield call(reduxInjectorSaga, staticRoute.route.injectRedux);\n\n    // Variables we will pass to setRouteEntry\n    let pathNode = null,\n      ancestors = null,\n      children = [],\n      siblings = null;\n\n    let contentTypeMapping = {};\n\n    // These variables are the return values from\n    // calls to withEvents.onRouteLoad and onRouteLoaded\n    let appsays,\n      requireLogin = false;\n\n    if (withEvents && withEvents.onRouteLoad) {\n      appsays = yield withEvents.onRouteLoad(action);\n    }\n\n    const staticRouteLinkDepth = staticRoute?.route?.params?.linkDepth;\n    const staticRouteFields = staticRoute?.route?.params?.fields;\n    const entryLinkDepth =\n      appsays && appsays.entryLinkDepth !== undefined\n        ? appsays.entryLinkDepth\n        : 2;\n    const setContentTypeLimits =\n      (typeof staticRouteLinkDepth === 'undefined' || !staticRouteFields) &&\n      !!ContentTypeMappings.find(\n        ct => ct.fields || ct.linkDepth || ct.nodeOptions\n      );\n\n    const state = yield select();\n    const routeEntry = selectRouteEntry(state, 'js');\n    const routeNode = selectCurrentNode(state, 'js');\n    const currentPath = action.path; //selectCurrentPath(state);\n    const deliveryApiStatus = selectVersionStatus(state);\n    const project = selectCurrentProject(state);\n    // const isHome = currentPath === '/';\n    const isPreview = currentPath && currentPath.startsWith('/preview/');\n    const defaultLang = (appsays && appsays.defaultLang) || 'en-GB';\n\n    if (\n      !isPreview &&\n      ((appsays && appsays.customRouting) ||\n        (staticRoute && !staticRoute.route.fetchNode) ||\n        (routeEntry &&\n          action.statePath === action.path &&\n          (appsays && appsays.refetchNode) !== true))\n    ) {\n      // To prevent erroneous 404s and wasted network calls, this covers\n      // - appsays customRouting and does SET_ENTRY etc. via the consuming app\n      // - all staticRoutes (where custom 'route.fetchNode' attribute is falsey)\n      // - standard Contensis SiteView Routing where we already have that entry in state\n      if (\n        routeEntry &&\n        (!staticRoute || (staticRoute.route && staticRoute.route.fetchNode))\n      ) {\n        pathNode = { ...routeNode, entry: null };\n        pathNode.entry = entry = routeEntry;\n        //Do nothing, the entry is allready the right one.\n        // yield put({\n        //   type: SET_ENTRY,\n        //   entry,\n        //   node: routeNode,\n        //   isLoading: false,\n        // });\n        yield put({\n          type: UPDATE_LOADING_STATE,\n          isLoading: false,\n        });\n      } else\n        yield call(\n          setRouteEntry,\n          currentPath,\n          routeEntry,\n          yield select(selectCurrentNode),\n          yield select(selectCurrentAncestors),\n          yield select(selectCurrentSiblings)\n        );\n    } else {\n      // Handle preview routes\n      if (isPreview) {\n        let splitPath = currentPath.split('/');\n        let entryGuid = splitPath[2];\n        let language = defaultLang;\n        if (splitPath.length >= 3) {\n          //set lang key if available in the path, else use default lang\n          //assumes preview url on content type is: http://preview.ALIAS.contensis.cloud/preview/{GUID}/{LANG}\n          if (splitPath.length == 4) language = splitPath[3];\n          // According to product dev we cannot use Node API\n          // for previewing entries as it gives a response of []\n          // -- apparently it is not correct to request latest content\n          // with Node API\n\n          let previewEntry = yield deliveryApi\n            .getClient(deliveryApiStatus, project)\n            .entries.get({\n              id: entryGuid,\n              language,\n              linkDepth: entryLinkDepth,\n            });\n          if (previewEntry) {\n            pathNode = { entry: previewEntry };\n            ({ entry } = pathNode || {});\n          }\n        }\n      } else {\n        // Handle all other routes\n        pathNode = yield cachedSearch.getNode(\n          {\n            depth: 0,\n            path: currentPath,\n            entryFields: setContentTypeLimits\n              ? ['sys.contentTypeId', 'sys.id']\n              : staticRouteFields || '*',\n            entryLinkDepth: setContentTypeLimits\n              ? 0\n              : typeof staticRouteLinkDepth !== 'undefined'\n              ? staticRouteLinkDepth\n              : entryLinkDepth,\n            language: defaultLang,\n            versionStatus: deliveryApiStatus,\n          },\n          project\n        );\n        ({ entry } = pathNode || {});\n\n        if (setContentTypeLimits && pathNode?.entry?.sys?.id) {\n          // Get fields[] and linkDepth from ContentTypeMapping to get the entry data\n          // and current node's ordinates at a specified depth with specified fields\n          contentTypeMapping =\n            findContentTypeMapping(\n              ContentTypeMappings,\n              pathNode.entry.sys.contentTypeId\n            ) || {};\n          const { fields, linkDepth } = contentTypeMapping;\n          const query = routeEntryByFieldsQuery(\n            pathNode.entry.sys.id,\n            pathNode.entry.sys.language,\n            fields,\n            deliveryApiStatus\n          );\n          const payload = yield cachedSearch.search(\n            query,\n            typeof linkDepth !== 'undefined' ? linkDepth : entryLinkDepth || 0,\n            project\n          );\n          if (payload?.items?.length > 0) {\n            pathNode.entry = entry = payload.items[0];\n          }\n        }\n      }\n\n      // make calls to fetch node ancestors, children,\n      // siblings or entire node tree\n      [ancestors, children, siblings] = yield call(\n        resolveCurrentNodeOrdinates,\n        {\n          appsays,\n          contentTypeMapping,\n          language: defaultLang,\n          path: currentPath,\n          pathNode,\n          project,\n          versionStatus: deliveryApiStatus,\n        }\n      );\n\n      if (children) pathNode.children = children;\n    }\n\n    const resolvedContentTypeMapping =\n      findContentTypeMapping(\n        ContentTypeMappings,\n        pathNode?.entry?.sys?.contentTypeId\n      ) || {};\n\n    // Inject redux { key, reducer, saga } provided by ContentTypeMapping\n    if (resolvedContentTypeMapping.injectRedux)\n      yield call(reduxInjectorSaga, resolvedContentTypeMapping.injectRedux);\n\n    if (withEvents && withEvents.onRouteLoaded) {\n      // Check if the app has provided a requireLogin boolean flag or groups array\n      // in addition to checking if requireLogin is set in the route definition\n      ({ requireLogin } =\n        (yield withEvents.onRouteLoaded({ ...action, entry })) || {});\n    }\n\n    if (requireLogin !== false) {\n      // Do not call the login feature saga if requireLogin is false\n      yield call(handleRequiresLoginSaga, {\n        ...action,\n        entry,\n        requireLogin,\n      });\n    }\n\n    if (!appsays || !appsays.preventScrollTop) {\n      // Scroll into View\n      if (typeof window !== 'undefined') window.scrollTo(0, 0);\n    }\n\n    if (pathNode?.entry?.sys?.id) {\n      entry = pathNode.entry;\n\n      yield call(\n        setRouteEntry,\n        currentPath,\n        entry,\n        pathNode,\n        ancestors,\n        siblings,\n        staticRoute?.route?.fetchNode?.entryMapper ||\n          resolvedContentTypeMapping.entryMapper,\n        false,\n        appsays?.refetchNode\n      );\n    } else {\n      if (staticRoute)\n        yield call(\n          setRouteEntry,\n          currentPath,\n          null,\n          pathNode,\n          ancestors,\n          siblings\n        );\n      else yield call(do404);\n    }\n  } catch (e) {\n    log.error(...['Error running route saga:', e, e.stack]);\n    yield call(do500, e);\n  }\n}\n\nfunction* resolveCurrentNodeOrdinates({\n  appsays,\n  contentTypeMapping,\n  language,\n  path,\n  pathNode,\n  project,\n  versionStatus,\n}) {\n  const apiCall = [() => null, () => null, () => null, () => null];\n\n  // if appsays customNavigation: true, we will set doNavigation to false\n  // if appsays customNavigation: { ... }, we will set doNavigation to the customNavigation object and check for child elements\n  // if appsays nothing we will set doNavigation to true and continue to do navigation calls\n  const doNavigation =\n    !appsays ||\n    (appsays?.customNavigation === true\n      ? false\n      : appsays?.customNavigation || true);\n\n  const {\n    entryLinkDepth = 0,\n    fields,\n    linkDepth,\n    nodeOptions = {},\n  } = contentTypeMapping;\n\n  if (pathNode && pathNode.id) {\n    if (doNavigation === true || doNavigation.ancestors) {\n      apiCall[0] = function* getAncestors() {\n        try {\n          return yield cachedSearch.getAncestors(\n            {\n              id: pathNode.id,\n              language,\n              versionStatus,\n            },\n            project\n          );\n        } catch (ex) {\n          log.info('Problem fetching ancestors', ex);\n          return [];\n        }\n      };\n    }\n\n    const childrenDepth =\n      doNavigation === true || doNavigation.children === true\n        ? 1\n        : (doNavigation && doNavigation.children) || 0;\n\n    if (\n      (typeof nodeOptions?.children === 'undefined' && childrenDepth > 0) ||\n      nodeOptions.children\n    ) {\n      const childrenOptions =\n        typeof nodeOptions.children === 'boolean' ? {} : nodeOptions.children;\n      apiCall[1] = function* getChildren() {\n        try {\n          return yield cachedSearch.getNode(\n            {\n              depth:\n                childrenOptions.depth !== undefined\n                  ? childrenOptions.depth\n                  : childrenDepth,\n              path,\n              entryFields: childrenOptions.fields || fields || undefined,\n              entryLinkDepth:\n                typeof childrenOptions.linkDepth !== 'undefined'\n                  ? childrenOptions.linkDepth\n                  : typeof linkDepth !== 'undefined'\n                  ? linkDepth\n                  : entryLinkDepth,\n              language,\n              versionStatus,\n            },\n            project\n          );\n        } catch (ex) {\n          log.info('Problem fetching children', ex);\n          return [];\n        }\n      };\n    }\n\n    if (\n      (typeof nodeOptions?.siblings === 'undefined' && doNavigation.siblings) ||\n      nodeOptions.siblings\n    ) {\n      apiCall[2] = function* getSiblings() {\n        try {\n          return yield cachedSearch.getSiblings(\n            {\n              id: pathNode.id,\n              entryFields: nodeOptions?.siblings?.fields || fields || undefined,\n              entryLinkDepth:\n                typeof nodeOptions?.siblings?.linkDepth !== 'undefined'\n                  ? nodeOptions.siblings.linkDepth\n                  : typeof linkDepth !== 'undefined'\n                  ? linkDepth\n                  : entryLinkDepth,\n              includeInMenu: true,\n              language,\n              versionStatus,\n            },\n            project\n          );\n        } catch (ex) {\n          log.info('Problem fetching siblings', ex);\n          return [];\n        }\n      };\n    }\n  }\n\n  const isTreeLoaded = yield select(hasNavigationTree);\n  if (!isTreeLoaded && (doNavigation === true || doNavigation.tree))\n    apiCall[3] = function* getNodeTree() {\n      const treeDepth =\n        doNavigation === true ||\n        !doNavigation.tree ||\n        doNavigation.tree === true\n          ? 2\n          : doNavigation.tree;\n\n      if (typeof window !== 'undefined') {\n        return yield put({\n          type: GET_NODE_TREE,\n          language,\n          treeDepth,\n        });\n      } else {\n        return yield call(ensureNodeTreeSaga, {\n          language,\n          treeDepth,\n        });\n      }\n    };\n\n  const [loadAncestors, loadChildren, loadSiblings, loadTree] = apiCall;\n  const [ancestors, nodeWithChildren, siblings] = yield all([\n    loadAncestors(),\n    loadChildren(),\n    loadSiblings(),\n    loadTree(),\n  ]);\n  return [ancestors, nodeWithChildren?.children, siblings];\n}\n\nfunction* setRouteEntry(\n  currentPath,\n  entry,\n  node,\n  ancestors,\n  siblings,\n  entryMapper,\n  notFound = false,\n  remapEntry = false\n) {\n  const entrySys = (entry && entry.sys) || {};\n\n  // Update a window global to provide the preview toolbar\n  // an updated entry id in client-side navigation\n  if (typeof window !== 'undefined') window.ContensisEntryId = entrySys.id;\n\n  const currentEntryId = yield select(selectRouteEntryEntryId);\n  const currentEntryLang = yield select(selectRouteEntryLanguage);\n  const mappedEntry =\n    currentEntryId === entrySys.id &&\n    currentEntryLang === entrySys.language &&\n    remapEntry === false\n      ? (yield select(selectMappedEntry, 'js')) || {}\n      : yield mapRouteEntry(entryMapper, {\n          ...node,\n          entry,\n          ancestors,\n          siblings,\n        });\n\n  yield all([\n    put({\n      type: SET_ENTRY,\n      id: entrySys.id,\n      currentPath,\n      entry,\n      mappedEntry,\n      node,\n      notFound,\n    }),\n    ancestors &&\n      put({\n        type: SET_ANCESTORS,\n        ancestors,\n      }),\n    siblings &&\n      put({\n        type: SET_SIBLINGS,\n        siblings,\n      }),\n  ]);\n}\n\nfunction* mapRouteEntry(entryMapper, node) {\n  try {\n    if (typeof entryMapper === 'function') {\n      const state = yield select();\n      const mappedEntry = yield call(entryMapper, node, state);\n      return mappedEntry;\n    }\n  } catch (e) {\n    log.error(...['Error running entryMapper:', e, e.stack]);\n  }\n  return;\n}\n\nfunction* do404() {\n  yield call(clientReloadHitServer);\n  yield put({\n    type: SET_ENTRY,\n    id: null,\n    entry: null,\n    notFound: true,\n  });\n}\n\nfunction* clientReloadHitServer() {\n  const stateEntry = yield select(selectRouteEntry);\n\n  // If in client and there is a stateEntry.sys field reload the page,\n  // on the 2nd load stateEntry.sys should be null at this point,\n  // we do not wish to reload again and get stuck in an infinite reloading loop\n  if (typeof window !== 'undefined' && (stateEntry?.sys || null)) {\n    window.location.reload();\n  }\n}\n\nfunction* do500(error) {\n  yield put({\n    type: SET_ENTRY,\n    id: null,\n    entry: null,\n    notFound: true,\n    isError: true,\n    error,\n    statusCode: error && error.status ? error.status : 500,\n  });\n}\n\nfunction* reduxInjectorSaga(injectorFn) {\n  if (typeof injectorFn === 'function') {\n    const { key, reducer, saga } = yield injectorFn();\n    reduxInjector({ key, reducer, saga });\n  }\n}\n","import { to } from 'await-to-js';\nimport { put, select, takeEvery } from 'redux-saga/effects';\nimport { setRoute } from '~/routing/redux/actions';\nimport { selectCurrentSearch } from '~/routing/redux/selectors';\nimport { queryParams } from '~/util/navigation';\nimport {\n  REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAILED,\n} from '../types';\n\nexport const registerSagas = [\n  takeEvery(REGISTER_USER, registerSaga),\n  takeEvery(REGISTER_USER_SUCCESS, redirectSaga),\n];\n\nfunction* registerSaga({ user, mappers }) {\n  let requestBody = user;\n  // Allow use of request mapper to take a user object\n  // of any format and return the payload for the api request\n  if (mappers && mappers.request && typeof mappers.request === 'function') {\n    requestBody = yield mappers.request(user);\n  }\n\n  // Make POST call to register API\n  const response = yield fetch('/account/register', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(requestBody),\n  });\n\n  if (response.ok) {\n    let mappedResponse;\n    const [, responseBody] = yield to(response.json());\n    if (responseBody) {\n      // Allow use of response mapper to convert the successful user object\n      // from the api response body into a user object of any format\n      if (\n        mappers &&\n        mappers.response &&\n        typeof mappers.response === 'function'\n      ) {\n        mappedResponse = yield mappers.response(responseBody);\n      }\n      // Update user object with mappedResponse or responseBody\n      yield put({\n        type: REGISTER_USER_SUCCESS,\n        user: mappedResponse || responseBody,\n      });\n    } else {\n      // OK response but unable to parse the response body\n      yield put({\n        type: REGISTER_USER_FAILED,\n        error: {\n          message:\n            'Unable to parse the created user from the register service response',\n        },\n      });\n    }\n  } else {\n    // Not OK responses, these can be due to service availability\n    // or status codes echoed from the responses received from\n    // management api when registering the user\n    const [, errorResponse] = yield to(response.json());\n    const error = (errorResponse && errorResponse.error) || errorResponse || {};\n    // Get something meaningful from the response if there is no message in the body\n    if (!error.message) {\n      error.message = `Registration service: ${response.statusText}`;\n      error.status = response.status;\n    }\n    yield put({\n      type: REGISTER_USER_FAILED,\n      error,\n    });\n  }\n}\n\nfunction* redirectSaga() {\n  // Check if querystring contains a redirect_uri\n  const currentQs = queryParams(yield select(selectCurrentSearch));\n  const redirectUri = currentQs.redirect_uri || currentQs.redirect;\n\n  // We must use redux based navigation to preserve the registration state\n  if (redirectUri) yield put(setRoute(redirectUri));\n}\n","const PAP_URL = 'https://pap.zengenti.com';\n\nconst USER_ENVS_URI = 'my-environments';\nconst USER_RESEND_VERIFICATION_URI = 'account/verify/resend';\nconst USER_REQUEST_PASSWORD_RESET_URI = 'account/reset';\nconst USER_RESET_PASSWORD_URI = 'account/reset/password';\n\nconst USER_ENVS_URL = `${PAP_URL}/${USER_ENVS_URI}`;\n\nconst BASE_OPTIONS = {\n  method: 'GET',\n  headers: { 'Content-Type': 'application/json' },\n};\n\nexport class UserHelper {\n  static async GetUsersEnvironments(securityToken) {\n    const options = {\n      ...BASE_OPTIONS,\n      headers: {\n        'x-security-token': securityToken,\n      },\n    };\n    return await UserHelper.get(USER_ENVS_URL, options);\n  }\n  static async ResendUserVerification(userEmail) {\n    const options = {\n      ...BASE_OPTIONS,\n    };\n    return await UserHelper.get(\n      `/${USER_RESEND_VERIFICATION_URI}?user=${userEmail}`,\n      options\n    );\n  }\n  static async RequestPasswordReset(userEmailObject) {\n    const options = {\n      ...BASE_OPTIONS,\n      body: JSON.stringify(userEmailObject),\n    };\n    options.method = 'POST';\n\n    return await UserHelper.get(`/${USER_REQUEST_PASSWORD_RESET_URI}`, options);\n  }\n  static async ResetPassword(resetPasswordObject) {\n    const options = {\n      ...BASE_OPTIONS,\n      body: JSON.stringify(resetPasswordObject),\n    };\n    options.method = 'POST';\n\n    return await UserHelper.get(`/${USER_RESET_PASSWORD_URI}`, options);\n  }\n\n  static async get(url, options = BASE_OPTIONS) {\n    try {\n      const responseBody = await api(url, options);\n      return responseBody;\n    } catch (err) {\n      return { error: { message: err.message } };\n    }\n  }\n}\n\nasync function api(url, options) {\n  return fetch(url, options)\n    .then(async response => {\n      return response.json().then(data => data);\n    })\n    .catch(error => {\n      throw error;\n    });\n}\n","import { put, takeEvery, select } from 'redux-saga/effects';\nimport { to } from 'await-to-js';\nimport { getManagementApiClient } from '~/user/util/ContensisManagementApi';\nimport { UserHelper } from '~/user/util/userHelper';\nimport { selectClientCredentials } from '../selectors';\nimport {\n  REQUEST_USER_PASSWORD_RESET,\n  RESET_USER_PASSWORD,\n  REQUEST_USER_PASSWORD_RESET_ERROR,\n  REQUEST_USER_PASSWORD_RESET_SENDING,\n  REQUEST_USER_PASSWORD_RESET_SUCCESS,\n  RESET_USER_PASSWORD_ERROR,\n  RESET_USER_PASSWORD_SENDING,\n  RESET_USER_PASSWORD_SUCCESS,\n  CHANGE_USER_PASSWORD,\n  CHANGE_USER_PASSWORD_SENDING,\n  CHANGE_USER_PASSWORD_SUCCESS,\n  CHANGE_USER_PASSWORD_ERROR,\n} from '../types';\n\nexport const resetPasswordSagas = [\n  takeEvery(REQUEST_USER_PASSWORD_RESET, requestPasswordResetSaga),\n  takeEvery(RESET_USER_PASSWORD, resetPasswordSaga),\n  takeEvery(CHANGE_USER_PASSWORD, changePasswordSaga),\n];\n\nfunction* requestPasswordResetSaga(action) {\n  const userEmailObject = action.userEmailObject;\n  yield put({\n    type: REQUEST_USER_PASSWORD_RESET_SENDING,\n  });\n  if (userEmailObject && userEmailObject.userEmail) {\n    try {\n      const passwordResetRequestResponse =\n        yield UserHelper.RequestPasswordReset(userEmailObject);\n\n      if (passwordResetRequestResponse) {\n        if (!passwordResetRequestResponse.error) {\n          yield put({\n            type: REQUEST_USER_PASSWORD_RESET_SUCCESS,\n          });\n        } else {\n          yield put({\n            type: REQUEST_USER_PASSWORD_RESET_ERROR,\n            error: passwordResetRequestResponse.error.message,\n          });\n        }\n      } else {\n        yield put({\n          type: REQUEST_USER_PASSWORD_RESET_ERROR,\n          error: 'No response from server',\n        });\n      }\n    } catch (error) {\n      yield put({\n        type: REQUEST_USER_PASSWORD_RESET_ERROR,\n        error: error && error.toString(),\n      });\n    }\n  } else {\n    yield put({\n      type: REQUEST_USER_PASSWORD_RESET_ERROR,\n      error: 'Invalid object',\n    });\n  }\n}\n\nfunction* resetPasswordSaga(action) {\n  const resetPasswordObject = action.resetPasswordObject;\n\n  yield put({\n    type: RESET_USER_PASSWORD_SENDING,\n  });\n  if (resetPasswordObject.token && resetPasswordObject.password) {\n    try {\n      const resetPasswordResponse = yield UserHelper.ResetPassword(\n        resetPasswordObject\n      );\n\n      if (resetPasswordResponse) {\n        if (!resetPasswordResponse.error) {\n          yield put({\n            type: RESET_USER_PASSWORD_SUCCESS,\n          });\n        } else {\n          const error =\n            (resetPasswordResponse.error.data &&\n              resetPasswordResponse.error.data.length > 0 &&\n              resetPasswordResponse.error.data[0].message) ||\n            resetPasswordResponse.error.message;\n          yield put({\n            type: RESET_USER_PASSWORD_ERROR,\n            error,\n          });\n        }\n      } else {\n        yield put({\n          type: RESET_USER_PASSWORD_ERROR,\n          error: 'No response from server',\n        });\n      }\n    } catch (error) {\n      yield put({\n        type: RESET_USER_PASSWORD_ERROR,\n        error: error && error.toString(),\n      });\n    }\n  } else {\n    yield put({\n      type: RESET_USER_PASSWORD_ERROR,\n      error: 'Invalid object',\n    });\n  }\n}\n\n// userId\n// existingPassword\n// newPassword\nfunction* changePasswordSaga(action) {\n  if (\n    !action ||\n    !action.userId ||\n    !action.currentPassword ||\n    !action.newPassword\n  ) {\n    yield put({\n      type: CHANGE_USER_PASSWORD_ERROR,\n      error: 'Invalid action object sent to changePassword saga',\n    });\n    return;\n  }\n\n  try {\n    const changePasswordObject = {\n      userId: action.userId,\n      existing: action.currentPassword,\n      new: action.newPassword,\n    };\n\n    yield put({\n      type: CHANGE_USER_PASSWORD_SENDING,\n    });\n    const clientCredentials = yield select(selectClientCredentials, 'js');\n    const client = yield getManagementApiClient({ ...clientCredentials });\n\n    const [err, res] = yield to(\n      client.security.users.updatePassword(changePasswordObject)\n    );\n\n    if (err) {\n      const error =\n        (err?.data?.data?.length > 0 && err.data.data[0].message) ||\n        err?.data?.message;\n      yield put({\n        type: CHANGE_USER_PASSWORD_ERROR,\n        error,\n      });\n      return;\n    }\n\n    // // eslint-disable-next-line no-console\n    // console.log(changePasswordObject);\n    // // eslint-disable-next-line no-console\n    // console.log(userCredentialsObject);\n    yield put({\n      type: CHANGE_USER_PASSWORD_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: CHANGE_USER_PASSWORD_ERROR,\n      error: error && error.toString(),\n    });\n  }\n}\n","import { loginSagas } from './login';\nimport { registerSagas } from './register';\nimport { resetPasswordSagas } from './resetPassword';\n\nexport const userSagas = [\n  ...loginSagas,\n  ...registerSagas,\n  ...resetPasswordSagas,\n];\n","// index.js\nimport { all } from 'redux-saga/effects';\nimport { navigationSagas } from './navigation';\nimport { routingSagas } from '~/routing/redux/sagas';\nimport { userSagas } from '~/user/redux/sagas';\n\nexport default function (featureSagas = []) {\n  return function* rootSaga() {\n    const subSagas = [...routingSagas, ...navigationSagas, ...userSagas];\n    yield all([...subSagas, ...featureSagas]);\n  };\n}\n","const servers = SERVERS; /* global SERVERS */\nconst alias = servers.alias.toLowerCase();\nconst publicUri = PUBLIC_URI; /* global PUBLIC_URI */\nconst projects = PROJECTS; /* global PROJECTS */\n\n// return a projectId via the request hostname\nconst pickProject = (hostname, query) => {\n  // if localhost we can only infer via a querystring, and take your word for it\n  if (hostname == 'localhost') {\n    return (query && query.p) || projects[0].id;\n  }\n\n  // if hostname is the actual public uri we can return the first project from the list\n  if (hostname == publicUri) {\n    return projects[0].id;\n  }\n\n  let project = 'unknown';\n\n  // // go through all the defined projects\n  // Object.entries(projects).map(([, p]) => {\n  const p = projects[0];\n\n  // check if we're accessing via the project's public uri\n  if (hostname.includes(p.publicUri)) project = p.id;\n\n  // the url structure is different for website (we don't prefix)\n  if (p.id.startsWith('website')) {\n    // check for internal and external hostnames\n    // we check live and preview distinctly so our rule does not clash with\n    // hostnames that use a project prefix\n    if (\n      hostname.includes(`live-${alias}.cloud.contensis.com`) ||\n      hostname.includes(`live.${alias}.contensis.cloud`) ||\n      hostname.includes(`preview-${alias}.cloud.contensis.com`) ||\n      hostname.includes(`preview.${alias}.contensis.cloud`)\n    )\n      project = p.id;\n  } else {\n    // check for internal and external hostnames, prefixed with the projectId\n    if (\n      hostname.includes(`${p.id.toLowerCase()}-${alias}.cloud.contensis.com`) ||\n      hostname.includes(`${p.id.toLowerCase()}.${alias}.contensis.cloud`)\n    )\n      project = p.id;\n  }\n  // });\n  return project === 'unknown' ? p.id : project;\n};\n\nexport default pickProject;\n","import React from 'react';\nimport { hot } from 'react-hot-loader';\nimport { AppRootProps } from '../routing/routes';\nimport { RouteLoader } from '../routing';\n\nconst AppRoot = (props: AppRootProps) => {\n  return <RouteLoader {...props} />;\n};\n\nexport default hot(module)(AppRoot);\n"],"names":["selectedHistory","window","createBrowserHistory","createMemoryHistory","history","options","browserHistory","navigationSagas","takeEvery","GET_NODE_TREE","ensureNodeTreeSaga","action","state","select","hasNavigationTree","deliveryApiVersionStatus","selectVersionStatus","project","selectCurrentProject","nodes","deliveryApi","getClient","getRoot","depth","treeDepth","language","put","type","SET_NODE_TREE","GET_NODE_TREE_ERROR","ex","log","error","toString","sys","contentTypeId","dataFormat","filename","id","includeInSearch","slug","uri","versionStatus","Fields","entryTitle","entryDescription","keywords","wildcard","fieldExpression","field","value","operator","weight","Array","isArray","equalToOrIn","Op","defaultExpressions","equalTo","arr","length","in","routeEntryByFieldsQuery","fields","query","Query","routingSagas","SET_NAVIGATION_PATH","getRouteSaga","SET_ROUTE","setRouteSaga","payload","method","args","path","entry","_staticRoute$route","_staticRoute$route$pa","_staticRoute$route2","_staticRoute$route2$p","_pathNode2","_pathNode2$entry","_pathNode2$entry$sys","_pathNode3","_pathNode3$entry","_pathNode3$entry$sys","withEvents","routes","ContentTypeMappings","staticRoute","route","injectRedux","call","reduxInjectorSaga","pathNode","ancestors","children","siblings","contentTypeMapping","appsays","requireLogin","onRouteLoad","staticRouteLinkDepth","params","linkDepth","staticRouteFields","entryLinkDepth","undefined","setContentTypeLimits","find","ct","nodeOptions","routeEntry","selectRouteEntry","routeNode","selectCurrentNode","currentPath","deliveryApiStatus","isPreview","startsWith","defaultLang","customRouting","fetchNode","statePath","refetchNode","UPDATE_LOADING_STATE","isLoading","setRouteEntry","selectCurrentAncestors","selectCurrentSiblings","splitPath","split","entryGuid","previewEntry","entries","get","_pathNode","_pathNode$entry","_pathNode$entry$sys","cachedSearch","getNode","entryFields","_payload$items","findContentTypeMapping","search","items","resolveCurrentNodeOrdinates","resolvedContentTypeMapping","onRouteLoaded","handleRequiresLoginSaga","preventScrollTop","scrollTo","_staticRoute$route3","_staticRoute$route3$f","_appsays","entryMapper","do404","e","stack","do500","apiCall","doNavigation","customNavigation","getAncestors","info","childrenDepth","childrenOptions","getChildren","getSiblings","_nodeOptions$siblings","_nodeOptions$siblings2","includeInMenu","isTreeLoaded","tree","getNodeTree","loadAncestors","loadChildren","loadSiblings","loadTree","nodeWithChildren","all","node","notFound","remapEntry","entrySys","ContensisEntryId","currentEntryId","selectRouteEntryEntryId","currentEntryLang","selectRouteEntryLanguage","mappedEntry","selectMappedEntry","mapRouteEntry","SET_ENTRY","SET_ANCESTORS","SET_SIBLINGS","clientReloadHitServer","stateEntry","location","reload","isError","statusCode","status","injectorFn","key","reducer","saga","reduxInjector","registerSagas","REGISTER_USER","registerSaga","REGISTER_USER_SUCCESS","redirectSaga","user","mappers","requestBody","request","response","fetch","headers","Accept","body","JSON","stringify","ok","mappedResponse","responseBody","to","json","REGISTER_USER_FAILED","message","errorResponse","statusText","currentQs","queryParams","selectCurrentSearch","redirectUri","redirect_uri","redirect","setRoute","PAP_URL","USER_ENVS_URI","USER_RESEND_VERIFICATION_URI","USER_REQUEST_PASSWORD_RESET_URI","USER_RESET_PASSWORD_URI","USER_ENVS_URL","BASE_OPTIONS","UserHelper","GetUsersEnvironments","securityToken","ResendUserVerification","userEmail","RequestPasswordReset","userEmailObject","ResetPassword","resetPasswordObject","url","api","err","then","data","catch","resetPasswordSagas","REQUEST_USER_PASSWORD_RESET","requestPasswordResetSaga","RESET_USER_PASSWORD","resetPasswordSaga","CHANGE_USER_PASSWORD","changePasswordSaga","REQUEST_USER_PASSWORD_RESET_SENDING","passwordResetRequestResponse","REQUEST_USER_PASSWORD_RESET_SUCCESS","REQUEST_USER_PASSWORD_RESET_ERROR","RESET_USER_PASSWORD_SENDING","token","password","resetPasswordResponse","RESET_USER_PASSWORD_SUCCESS","RESET_USER_PASSWORD_ERROR","userId","currentPassword","newPassword","CHANGE_USER_PASSWORD_ERROR","changePasswordObject","existing","new","CHANGE_USER_PASSWORD_SENDING","clientCredentials","selectClientCredentials","client","getManagementApiClient","res","security","users","updatePassword","_err$data","_err$data$data","_err$data2","CHANGE_USER_PASSWORD_SUCCESS","userSagas","loginSagas","featureSagas","rootSaga","subSagas","servers","SERVERS","alias","toLowerCase","publicUri","PUBLIC_URI","projects","PROJECTS","pickProject","hostname","p","includes","AppRoot","props","React","createElement","RouteLoader"],"mappings":"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"}
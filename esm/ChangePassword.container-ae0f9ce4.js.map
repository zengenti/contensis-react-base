{"version":3,"file":"ChangePassword.container-ae0f9ce4.js","sources":["../src/routing/util/find-contenttype-mapping.ts","../src/user/transformations/mapClientCredentials.js","../src/user/util/ContensisManagementApi.js","../src/user/util/OidcUserManager.ts","../src/user/util/LoginHelper.class.js","../src/user/redux/sagas/login.js","../src/user/redux/actions.js","../src/user/hooks/useLogin.js","../src/user/containers/Login.container.js","../src/user/hooks/useRegistration.js","../src/user/containers/Registration.container.js","../src/user/hooks/useForgotPassword.js","../src/user/containers/ForgotPassword.container.js","../src/user/hooks/useChangePassword.js","../src/user/containers/ChangePassword.container.js"],"sourcesContent":["import { ContentTypeMapping } from '../routes';\n\nexport const findContentTypeMapping = (\n  ContentTypeMappings: ContentTypeMapping[],\n  contentTypeId: string\n) => ContentTypeMappings.find(ct => ct.contentTypeID === contentTypeId);\n","import { mapJson } from '~/util/json-mapper';\n\nconst clientCredentials = {\n  bearerToken: 'bearerToken',\n  bearerTokenExpiryDate: ({ bearerTokenExpiryDate }) =>\n    bearerTokenExpiryDate.toISOString(),\n  refreshToken: 'refreshToken',\n  refreshTokenExpiryDate: ({ refreshTokenExpiryDate }) =>\n    refreshTokenExpiryDate.toISOString(),\n  contensisClassicToken: 'contensisClassicToken',\n};\nexport default obj => mapJson(obj, clientCredentials);\n","// import { Client } from 'contensis-management-api';\n\nexport const getManagementApiClient = async ({\n  bearerToken,\n  bearerTokenExpiryDate,\n  refreshToken,\n  refreshTokenExpiryDate,\n  contensisClassicToken,\n  username,\n  password,\n}) => {\n  const rootUrl = SERVERS.api || SERVERS.cms; /* global SERVERS */\n  const projectId = PROJECTS[0].id; /* global PROJECTS */\n\n  let config = {};\n  if (refreshToken) {\n    config = {\n      clientType: 'contensis_classic_refresh_token',\n      clientDetails: {\n        refreshToken,\n      },\n    };\n  } else {\n    config = {\n      clientType: 'contensis_classic',\n      clientDetails: {\n        username,\n        password,\n      },\n    };\n  }\n\n  let { Client } = await import('contensis-management-api');\n\n  if (typeof window === 'undefined') {\n    const { UniversalClient } = await import('contensis-management-api');\n    Client = UniversalClient;\n  }\n\n  const client = Client.create({\n    ...config,\n    projectId,\n    rootUrl,\n  });\n\n  if (bearerToken) client.bearerToken = bearerToken;\n  if (bearerTokenExpiryDate)\n    client.bearerTokenExpiryDate = bearerTokenExpiryDate;\n  if (refreshToken) client.refreshToken = refreshToken;\n  if (refreshTokenExpiryDate)\n    client.refreshTokenExpiryDate = refreshTokenExpiryDate;\n  if (contensisClassicToken)\n    client.contensisClassicToken = contensisClassicToken;\n\n  return client;\n};\n","import { UserManagerSettings } from 'oidc-client';\n\nconst context = (\n  typeof window != 'undefined' ? window : global\n) as typeof globalThis & {\n  WSFED_LOGIN: string;\n};\n\nconst requireOidc =\n  process.env.NODE_ENV === 'development'\n    ? WSFED_LOGIN === 'true' /* global WSFED_LOGIN */\n    : context.WSFED_LOGIN === 'true';\n\nconst servers = SERVERS; /* global SERVERS */\n\nexport const userManagerConfig =\n  typeof window !== 'undefined'\n    ? {\n        authority: `${servers.cms}/authenticate/`,\n        client_id: 'WebsiteAdfsClient',\n        redirect_uri: window.location.toString(),\n        post_logout_redirect_uri: window.location.toString(),\n        response_type: 'id_token',\n        scope: 'openid',\n        filterProtocolClaims: false,\n      }\n    : {};\n\nexport const createUserManager = async (config: UserManagerSettings) => {\n  if (typeof window !== 'undefined' && requireOidc) {\n    try {\n      const { UserManager } = await import(\n        /* webpackChunkName: \"oidcclient\" */ 'oidc-client'\n      );\n      return new UserManager(config);\n    } catch (e) {\n      console.error('Exception in createUserManager: ', e);\n    }\n  } else return {};\n};\n","/* eslint-disable require-atomic-updates */\nimport { to } from 'await-to-js';\n\nimport { getManagementApiClient } from './ContensisManagementApi';\n\nimport mapClientCredentials from '../transformations/mapClientCredentials';\nimport { createUserManager, userManagerConfig } from './OidcUserManager';\nimport { LOGIN_COOKIE, REFRESH_TOKEN_COOKIE } from './CookieConstants';\n\nconst context = typeof window != 'undefined' ? window : global;\n\nexport class LoginHelper {\n  static CMS_URL = SERVERS.cms /* global SERVERS */;\n  static WSFED_LOGIN =\n    process.env.NODE_ENV === 'development'\n      ? WSFED_LOGIN === 'true' /* global WSFED_LOGIN */\n      : context.WSFED_LOGIN === 'true';\n  static LOGIN_ROUTE = '/account/login';\n  static ACCESS_DENIED_ROUTE = '/account/access-denied';\n\n  cookies;\n  constructor(cookies) {\n    this.cookies = cookies;\n  }\n\n  SetLoginCookies({ contensisClassicToken, refreshToken }) {\n    console.info(\n      'SetLoginCookies:',\n      LOGIN_COOKIE,\n      contensisClassicToken,\n      REFRESH_TOKEN_COOKIE,\n      refreshToken\n    );\n\n    if (contensisClassicToken)\n      this.cookies.SetCookie(LOGIN_COOKIE, contensisClassicToken);\n\n    if (refreshToken)\n      this.cookies.SetCookie(REFRESH_TOKEN_COOKIE, refreshToken);\n  }\n\n  GetCachedCredentials() {\n    return {\n      bearerToken: null,\n      bearerTokenExpiryDate: null,\n      refreshToken: this.cookies.GetCookie(REFRESH_TOKEN_COOKIE),\n      refreshTokenExpiryDate: null,\n      contensisClassicToken: this.cookies.GetCookie(LOGIN_COOKIE),\n    };\n  }\n\n  ClearCachedCredentials() {\n    this.cookies.DeleteCookie(LOGIN_COOKIE);\n    this.cookies.DeleteCookie(REFRESH_TOKEN_COOKIE);\n\n    if (LoginHelper.WSFED_LOGIN && typeof window !== 'undefined') {\n      // remove any oidc keys left over in localStorage\n      const { localStorage } = window;\n      const keys = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (typeof key === 'string' && key.startsWith('oidc.'))\n          keys.push(localStorage.key(i));\n      }\n      keys.forEach(key => localStorage.removeItem(key));\n    }\n  }\n\n  async LoginUser({ username, password, clientCredentials }) {\n    let credentials = clientCredentials;\n    let authenticationState = {\n      clientCredentials: null,\n      isAuthenticated: false,\n      isAuthenticationError: false,\n      isError: false,\n    };\n    let transientClient;\n    let user;\n\n    if (username && password) {\n      // Get a management client with username and password\n      transientClient = await getManagementApiClient({\n        username,\n        password,\n      });\n\n      // Ensure the client has requested a bearer token\n      const [loginError, clientBearerToken] = await to(\n        transientClient.ensureBearerToken()\n      );\n\n      // Problem getting token with username and password\n      if (loginError) {\n        authenticationState = {\n          clientCredentials: null,\n          errorMessage: loginError.message || null,\n          isAuthenticated: false,\n          isAuthenticationError: loginError.name.includes(\n            'ContensisAuthenticationError'\n          ),\n          isError: true,\n        };\n        this.ClearCachedCredentials();\n      }\n\n      // Got a token using username and password\n      if (clientBearerToken) {\n        // Set credentials so we can continue to GetUserDetails\n        credentials = mapClientCredentials(transientClient);\n        this.SetLoginCookies(credentials);\n        authenticationState = {\n          clientCredentials: credentials,\n          isAuthenticated: true,\n          isAuthenticationError: false,\n          isError: false,\n        };\n      }\n    }\n\n    // If we have credentials supplied by a successful username and password login\n    // or clientCredentials supplied in the options argument we can continue to\n    // fetch the user's details\n    if (credentials) {\n      const client =\n        transientClient || (await getManagementApiClient(credentials));\n      const [error, userDetails] = await LoginHelper.GetUserDetails(client);\n\n      if (error) {\n        authenticationState = {\n          clientCredentials: null,\n          errorMessage: error.message,\n          isAuthenticated: false,\n          isAuthenticationError: false,\n          isError: true,\n        };\n        this.ClearCachedCredentials();\n      } else {\n        // Ensure we get latest refreshToken and contensisClassicToken from the latest client\n        const latestCredentials = mapClientCredentials(client);\n        this.SetLoginCookies(latestCredentials);\n\n        user = userDetails;\n        authenticationState = {\n          clientCredentials: latestCredentials,\n          isAuthenticated: true,\n          isAuthenticationError: false,\n          isError: false,\n        };\n      }\n    }\n\n    return { authenticationState, user };\n  }\n\n  LogoutUser(redirectPath) {\n    this.ClearCachedCredentials();\n    if (LoginHelper.WSFED_LOGIN) {\n      LoginHelper.WsFedLogout(redirectPath);\n    } else {\n      if (redirectPath) LoginHelper.ClientRedirectToPath(redirectPath);\n      else LoginHelper.ClientRedirectToSignInPage();\n    }\n  }\n\n  static withCookies = cookieHelper => new LoginHelper(cookieHelper);\n\n  static GetUserDetails = async client => {\n    let userError,\n      groupsError,\n      user = {},\n      groupsResult;\n\n    [userError, user] = await to(client.security.users.getCurrent());\n    if (user && user.id) {\n      [groupsError, groupsResult] = await to(\n        client.security.users.getUserGroups({\n          userId: user.id,\n          includeInherited: true,\n          pageOptions: { pageSize: 100 },\n        })\n      );\n      // Set groups attribute in user object to be the items\n      // array from the getUserGroups result\n      if (groupsResult && groupsResult.items) user.groups = groupsResult.items;\n\n      //If groups call fails then log the error but allow the user to login still\n      // eslint-disable-next-line no-console\n      if (groupsError) console.log(groupsError);\n    }\n    return [userError, user];\n  };\n\n  static ClientRedirectToHome(location) {\n    if (typeof window != 'undefined') {\n      let url = '/';\n      if (location) {\n        const { search, hash } = location;\n        url = search ? `${url}${search}` : url;\n        url = hash ? `${url}${hash}` : url;\n      }\n      window.location.href = url;\n    }\n  }\n\n  static async ClientRedirectToSignInPage(redirectPath) {\n    if (typeof location === 'undefined') return;\n    if (LoginHelper.WSFED_LOGIN) {\n      await LoginHelper.WsFedLogout();\n      await LoginHelper.WsFedLogin();\n    } else {\n      // Standard Contensis Login\n      let url = LoginHelper.LOGIN_ROUTE;\n      if (typeof redirectPath === 'string')\n        url = `${url}?redirect_uri=${redirectPath}`;\n      if (\n        typeof location !== 'undefined' &&\n        redirectPath !== LoginHelper.LOGIN_ROUTE\n      )\n        location.replace(url);\n    }\n  }\n\n  static GetAccessDeniedRoute(originalPath) {\n    let url = LoginHelper.ACCESS_DENIED_ROUTE;\n    if (originalPath !== url && typeof originalPath === 'string')\n      url = `${url}?original_uri=${originalPath}`;\n    return url;\n  }\n\n  static ClientRedirectToAccessDeniedPage(originalPath) {\n    if (typeof location !== 'undefined')\n      location.href = LoginHelper.GetAccessDeniedRoute(originalPath);\n  }\n\n  static ClientRedirectToPath(redirectPath) {\n    if (typeof redirectPath === 'string') {\n      if (typeof location !== 'undefined') window.location.href = redirectPath;\n    } else LoginHelper.ClientRedirectToHome();\n  }\n\n  static async WsFedLogin(redirectUri) {\n    const userManager = await createUserManager(userManagerConfig);\n    userManager.signinRedirect({\n      scope: 'openid',\n      response_type: 'id_token',\n      redirect_uri: redirectUri || window.location.toString(),\n    });\n  }\n\n  static RemoveSecurityTokenQuery() {\n    const params = new URLSearchParams(window.location.search);\n    if (params.has('securitytoken') || params.has('securityToken')) {\n      params.delete('securitytoken');\n      params.delete('securityToken');\n      window.location = `${window.location.pathname}${\n        params.toString() ? `?${params}` : ''\n      }`;\n    }\n  }\n\n  static async WsFedLogout(redirectPath) {\n    await fetch(\n      `${LoginHelper.CMS_URL}/authenticate/logout?jsonResponseRequired=true`,\n      {\n        credentials: 'include',\n      }\n    );\n    if (redirectPath) {\n      window.location = redirectPath;\n    } else {\n      // Explicitly check and remove any stale\n      // security token that may be in the query string\n      LoginHelper.RemoveSecurityTokenQuery();\n    }\n  }\n\n  static async GetCredentialsForSecurityToken(securityToken) {\n    const [error, response] = await to(\n      fetch(`${LoginHelper.CMS_URL}/REST/Contensis/Security/IsAuthenticated`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          securityToken: encodeURIComponent(securityToken),\n        }),\n      })\n    );\n    if (error) return [{ message: 'Failed to fetch credentials' }];\n    if (response.ok) {\n      const [parseError, body] = await to(response.json());\n      if (parseError) return [parseError];\n\n      const { LogonResult, ApplicationData = [] } = body;\n      if (LogonResult !== 0) {\n        console.info(`Security token is invalid - LogonResult: ${LogonResult}`);\n        return [\n          { message: 'Security token is invalid', data: ApplicationData },\n        ];\n      }\n      if (ApplicationData.length > 0) {\n        let refreshToken;\n        ApplicationData.forEach(item => {\n          if (item.Key === 'ContensisSecurityRefreshToken')\n            refreshToken = item.Value;\n        });\n        if (!refreshToken) {\n          return [\n            {\n              message:\n                'Fetch credentials: Unable to find ContensisSecurityRefreshToken',\n            },\n          ];\n        }\n        return [undefined, refreshToken];\n      } else {\n        return [\n          {\n            message:\n              'Fetch credentials: Unable to find ContensisSecurityRefreshToken',\n          },\n        ];\n      }\n    } else {\n      return [\n        {\n          message: `Fetch credentials error: ${response.status} ${response.statusText}`,\n        },\n      ];\n    }\n  }\n\n  // static isZengentiStaff(email) {\n  //   const emailRefs = ['@zengenti', '@contensis'];\n\n  //   return emailRefs.some(emailRef => {\n  //     if (email.includes(emailRef)) {\n  //       return true;\n  //     }\n  //   });\n  // }\n}\n","import { takeEvery, select, put, call } from 'redux-saga/effects';\nimport {\n  SET_AUTHENTICATION_STATE,\n  LOGIN_USER,\n  LOGOUT_USER,\n  VALIDATE_USER,\n} from '../types';\nimport {\n  selectUserIsAuthenticated,\n  selectClientCredentials,\n  selectUserGroups,\n} from '../selectors';\n\nimport { setRoute } from '~/routing/redux/actions';\nimport { selectCurrentSearch } from '~/routing/redux/selectors';\nimport { findContentTypeMapping } from '~/routing/util/find-contenttype-mapping';\n\nimport mapClientCredentials from '~/user/transformations/mapClientCredentials';\n\nimport { getManagementApiClient } from '~/user/util/ContensisManagementApi';\nimport { LoginHelper } from '~/user/util/LoginHelper.class';\nimport { matchUserGroup } from '~/user/util/matchGroups';\nimport { queryParams } from '~/util/navigation';\n\nexport const loginSagas = [\n  takeEvery(LOGIN_USER, loginUserSaga),\n  takeEvery(LOGOUT_USER, logoutUserSaga),\n  takeEvery(VALIDATE_USER, validateUserSaga),\n  takeEvery(SET_AUTHENTICATION_STATE, redirectAfterSuccessfulLoginSaga),\n];\n\nexport function* handleRequiresLoginSaga(action) {\n  const {\n    cookies,\n    entry,\n    path,\n    requireLogin,\n    routes: { ContentTypeMappings },\n    staticRoute,\n  } = action;\n  let userLoggedIn = yield select(selectUserIsAuthenticated);\n\n  // Check for a securityToken in querystring\n  const currentQs = queryParams(yield select(selectCurrentSearch));\n  const securityToken = currentQs.securityToken || currentQs.securitytoken;\n\n  // Check if any of the defined routes have \"requireLogin\" attribute\n  const { requireLogin: authRoute } = (staticRoute && staticRoute.route) || {};\n  const { requireLogin: authContentType } =\n    (entry &&\n      findContentTypeMapping(ContentTypeMappings, entry?.sys?.contentTypeId)) ||\n    {};\n\n  // If requireLogin, authRoute or authContentType has been specified as an\n  // array of groups we can merge all the arrays and match on any group supplied\n  const routeRequiresGroups = [\n    ...((Array.isArray(authContentType) && authContentType) || []),\n    ...((Array.isArray(authRoute) && authRoute) || []),\n    ...((Array.isArray(requireLogin) && requireLogin) || []),\n  ];\n  const routeRequiresLogin = !!authContentType || !!authRoute || !!requireLogin;\n\n  if (!userLoggedIn) {\n    // If cookies or securityToken are found on any route change\n    // always validate and login the user\n    if (routeRequiresLogin) {\n      console.info(`Route requires login: ${path}`);\n      // If routeRequiresLogin do a blocking call that returns userLoggedIn\n      userLoggedIn = yield call(validateUserSaga, {\n        cookies,\n        securityToken,\n      });\n      console.info(`User logged in: ${userLoggedIn}`);\n    }\n    // otherwise do a non blocking put to handle validation in the background\n    else yield put({ type: VALIDATE_USER, cookies, securityToken });\n  }\n\n  if (routeRequiresLogin) {\n    // If a security token is in the querystring and we are not already\n    // logged in something is wrong and we won't bother going on another redirect loop\n    if (!userLoggedIn && !securityToken) {\n      LoginHelper.ClientRedirectToSignInPage(action.location.pathname);\n    } else if (routeRequiresGroups.length > 0) {\n      const userGroups = yield select(selectUserGroups, 'js');\n      const groupMatch = matchUserGroup(userGroups, routeRequiresGroups);\n\n      if (!groupMatch)\n        LoginHelper.ClientRedirectToAccessDeniedPage(action.location.pathname);\n    }\n  }\n\n  return userLoggedIn;\n}\n\nfunction* validateUserSaga({ cookies, securityToken }) {\n  const login = LoginHelper.withCookies(cookies);\n  // Check for refreshToken in cookies\n  let clientCredentials = login.GetCachedCredentials();\n\n  if (\n    securityToken ||\n    clientCredentials.securityToken ||\n    clientCredentials.refreshToken\n  ) {\n    // We only attempt to validate the user if one of the stored\n    // tokens are found, in this case we set loading state manually\n    // so we don't need to set and unset loading if there are no stored\n    yield put({\n      type: SET_AUTHENTICATION_STATE,\n      authenticationState: {\n        isLoading: true,\n      },\n    });\n    // If we have just a security token we will call a CMS endpoint\n    // and provide us with a RefreshToken cookie we can use during login\n    if (\n      securityToken ||\n      (clientCredentials.securityToken && !clientCredentials.refreshToken)\n    ) {\n      const [error, refreshToken] =\n        yield LoginHelper.GetCredentialsForSecurityToken(\n          securityToken || clientCredentials.securityToken\n        );\n      if (refreshToken) {\n        // Set cookies and reload values\n        login.SetLoginCookies({\n          contensisClassicToken: securityToken,\n          refreshToken,\n        });\n        clientCredentials = login.GetCachedCredentials();\n      }\n      if (error) {\n        login.ClearCachedCredentials();\n        yield put({\n          type: SET_AUTHENTICATION_STATE,\n          authenticationState: {\n            isError: true,\n            errorMessage:\n              error?.message ||\n              (error && 'toString' in error && error.toString()),\n          },\n        });\n      }\n    }\n\n    // Log the user in if a refreshToken is found\n    if (clientCredentials.refreshToken) {\n      console.info(\n        `Login user with refreshToken ${clientCredentials.refreshToken}`\n      );\n      yield call(loginUserSaga, {\n        clientCredentials,\n        cookies: login.cookies,\n      });\n    }\n  }\n\n  // Tell any callers have we successfully logged in?\n  return yield select(selectUserIsAuthenticated);\n}\n\nfunction* loginUserSaga(action = {}) {\n  const { username, password, clientCredentials, cookies } = action;\n  const login = LoginHelper.withCookies(cookies);\n\n  // If a WSFED_LOGIN site has dispatched the loginUser action\n  // just redirect them to the Identity Provider sign in\n  if (action.type === LOGIN_USER && LoginHelper.WSFED_LOGIN)\n    LoginHelper.ClientRedirectToSignInPage();\n\n  const { authenticationState, user } = yield login.LoginUser({\n    username,\n    password,\n    clientCredentials,\n  });\n\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    authenticationState,\n    user,\n  });\n}\n\nconst removeHostnamePart = path => {\n  // eslint-disable-next-line no-console\n  console.log(path);\n  const relativePath = '/' + path.split('/').splice(3).join('/');\n  // eslint-disable-next-line no-console\n  console.log(relativePath);\n  return relativePath;\n};\n\nfunction* redirectAfterSuccessfulLoginSaga() {\n  const isLoggedIn = yield select(selectUserIsAuthenticated);\n  const { redirect_uri: redirectPath, ReturnURL: assetRedirectPath } =\n    queryParams(yield select(selectCurrentSearch));\n\n  if (isLoggedIn && assetRedirectPath && typeof window != 'undefined') {\n    const path = removeHostnamePart(assetRedirectPath);\n    // This has to be a hard href to get the app to\n    // leave React and hit the server for the IIS hosted assets\n    window.location.href = path;\n    // yield put(setRoute(path)); // does not work in this scenario\n  } else if (isLoggedIn && redirectPath) {\n    yield put(setRoute(redirectPath));\n  }\n}\n\nfunction* logoutUserSaga({ redirectPath, cookies }) {\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    user: null,\n  });\n  yield LoginHelper.withCookies(cookies).LogoutUser(redirectPath);\n}\n\nexport function* refreshSecurityToken() {\n  const clientCredentials = yield select(selectClientCredentials, 'js');\n  if (Object.keys(clientCredentials).length > 0) {\n    const client = yield getManagementApiClient(clientCredentials);\n    yield client.authenticate();\n\n    yield put({\n      type: SET_AUTHENTICATION_STATE,\n      authenticationState: {\n        clientCredentials: mapClientCredentials(client),\n      },\n    });\n  }\n}\n","import { action } from '~/redux/util';\nimport {\n  CHANGE_USER_PASSWORD,\n  LOGIN_USER,\n  LOGOUT_USER,\n  REGISTER_USER,\n  REQUEST_USER_PASSWORD_RESET,\n  RESET_USER_PASSWORD,\n} from './types';\n\nexport const loginUser = (username, password, cookies) =>\n  action(LOGIN_USER, { username, password, cookies });\n\nexport const logoutUser = (redirectPath, cookies) =>\n  action(LOGOUT_USER, { redirectPath, cookies });\n\nexport const registerUser = (user, mappers) =>\n  action(REGISTER_USER, {\n    user,\n    mappers,\n  });\n\nexport const requestPasswordReset = userEmailObject =>\n  action(REQUEST_USER_PASSWORD_RESET, { userEmailObject });\n\nexport const resetPassword = resetPasswordObject =>\n  action(RESET_USER_PASSWORD, { resetPasswordObject });\n\nexport const changePassword = (userId, currentPassword, newPassword) =>\n  action(CHANGE_USER_PASSWORD, { userId, currentPassword, newPassword });\n","import { useCookies } from 'react-cookie';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginUser, logoutUser } from '../redux/actions';\nimport {\n  selectUser,\n  selectUserIsAuthenticationError,\n  selectUserIsError,\n  selectUserErrorMessage,\n  selectUserIsAuthenticated,\n  selectUserIsLoading,\n} from '../redux/selectors';\nimport { CookieHelper } from '../util/CookieHelper.class';\n\nconst useLogin = () => {\n  const cookies = new CookieHelper(...useCookies());\n\n  const dispatch = useDispatch();\n  const select = useSelector;\n\n  return {\n    loginUser: (username, password) =>\n      dispatch(loginUser(username, password, cookies)),\n    logoutUser: redirectPath => dispatch(logoutUser(redirectPath, cookies)),\n    errorMessage: select(selectUserErrorMessage),\n    isAuthenticated: select(selectUserIsAuthenticated),\n    isAuthenticationError: select(selectUserIsAuthenticationError),\n    isError: select(selectUserIsError),\n    isLoading: select(selectUserIsLoading),\n    user: select(selectUser),\n    // DEPRECATED: authenticationError is deprecated use isAuthenticationError instead\n    authenticationError: select(selectUserIsAuthenticationError),\n    // DEPRECATED: authenticationErrorMessage is deprecated use errorMessage instead\n    authenticationErrorMessage: select(selectUserErrorMessage),\n    // DEPRECATED: error is deprecated use isError instead\n    error: select(selectUserIsError),\n  };\n};\n\nexport default useLogin;\n","import useLogin from '../hooks/useLogin';\nimport { toJS } from '~/util/ToJs';\n\nconst LoginContainer = ({ children, ...props }) => {\n  const userProps = useLogin(props);\n  return children(userProps);\n};\n\nLoginContainer.propTypes = {};\n\nexport default toJS(LoginContainer);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { registerUser } from '../redux/actions';\nimport {\n  selectUserRegistration,\n  selectUserRegistrationError,\n  selectUserRegistrationIsLoading,\n  selectUserRegistrationIsSuccess,\n} from '../redux/selectors';\n\nconst useRegistration = () => {\n  const dispatch = useDispatch();\n  const select = useSelector;\n\n  return {\n    registerUser: (user, mappers) => dispatch(registerUser(user, mappers)),\n    error: select(selectUserRegistrationError),\n    isLoading: select(selectUserRegistrationIsLoading),\n    isSuccess: select(selectUserRegistrationIsSuccess),\n    user: select(selectUserRegistration),\n  };\n};\n\nexport default useRegistration;\n","import useRegistration from '../hooks/useRegistration';\nimport { toJS } from '~/util/ToJs';\n\nconst RegistrationContainer = ({ children, ...props }) => {\n  const userProps = useRegistration(props);\n  return children(userProps);\n};\n\nRegistrationContainer.propTypes = {};\n\nexport default toJS(RegistrationContainer);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { requestPasswordReset, resetPassword } from '../redux/actions';\nimport {\n  selectPasswordResetRequestError,\n  selectPasswordResetRequestSending,\n  selectPasswordResetRequestSent,\n  selectResetPasswordSending,\n  selectResetPasswordSent,\n  selectResetPasswordError,\n} from '../redux/selectors';\nimport { selectCurrentSearch } from '~/routing/redux/selectors';\n\nconst useForgotPassword = () => {\n  const dispatch = useDispatch();\n  const select = useSelector;\n\n  return {\n    isLoading: select(selectPasswordResetRequestSending),\n    isSuccess: select(selectPasswordResetRequestSent),\n    error: select(selectPasswordResetRequestError),\n    requestPasswordReset: userEmailObject =>\n      dispatch(requestPasswordReset(userEmailObject)),\n\n    setNewPassword: {\n      queryString: select(selectCurrentSearch),\n      isLoading: select(selectResetPasswordSending),\n      isSuccess: select(selectResetPasswordSent),\n      error: select(selectResetPasswordError),\n      submit: resetPasswordObject =>\n        dispatch(resetPassword(resetPasswordObject)),\n    },\n  };\n};\n\nexport default useForgotPassword;\n","import useForgotPassword from '../hooks/useForgotPassword';\nimport { toJS } from '~/util/ToJs';\n\nconst ForgotPasswordContainer = ({ children, ...props }) => {\n  const userProps = useForgotPassword(props);\n  return children(userProps);\n};\n\nForgotPasswordContainer.propTypes = {};\n\nexport default toJS(ForgotPasswordContainer);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changePassword } from '../redux/actions';\nimport {\n  selectChangePasswordSending,\n  selectChangePasswordSent,\n  selectChangePasswordError,\n  selectUserIsAuthenticated,\n  selectUserGuid,\n} from '../redux/selectors';\n\nconst useChangePassword = () => {\n  const dispatch = useDispatch();\n  const select = useSelector;\n\n  return {\n    isLoading: select(selectChangePasswordSending),\n    isSuccess: select(selectChangePasswordSent),\n    userId: select(selectUserGuid),\n    isLoggedIn: select(selectUserIsAuthenticated),\n    error: select(selectChangePasswordError),\n    changePassword: (userId, currentPassword, newPassword) =>\n      dispatch(changePassword(userId, currentPassword, newPassword)),\n  };\n};\n\nexport default useChangePassword;\n","import useChangePassword from '../hooks/useChangePassword';\nimport { toJS } from '~/util/ToJs';\n\nconst ChangePasswordContainer = ({ children, ...props }) => {\n  const userProps = useChangePassword(props);\n  return children(userProps);\n};\n\nChangePasswordContainer.propTypes = {};\n\nexport default toJS(ChangePasswordContainer);\n"],"names":["findContentTypeMapping","ContentTypeMappings","contentTypeId","find","ct","contentTypeID","clientCredentials","bearerToken","bearerTokenExpiryDate","toISOString","refreshToken","refreshTokenExpiryDate","contensisClassicToken","obj","mapJson","getManagementApiClient","username","password","rootUrl","SERVERS","api","cms","projectId","PROJECTS","id","config","clientType","clientDetails","Client","window","UniversalClient","client","create","context","global","requireOidc","process","env","NODE_ENV","WSFED_LOGIN","servers","userManagerConfig","authority","client_id","redirect_uri","location","toString","post_logout_redirect_uri","response_type","scope","filterProtocolClaims","createUserManager","UserManager","e","console","error","LoginHelper","constructor","cookies","SetLoginCookies","info","LOGIN_COOKIE","REFRESH_TOKEN_COOKIE","SetCookie","GetCachedCredentials","GetCookie","ClearCachedCredentials","DeleteCookie","localStorage","keys","i","length","key","startsWith","push","forEach","removeItem","LoginUser","credentials","authenticationState","isAuthenticated","isAuthenticationError","isError","transientClient","user","loginError","clientBearerToken","to","ensureBearerToken","errorMessage","message","name","includes","mapClientCredentials","userDetails","GetUserDetails","latestCredentials","LogoutUser","redirectPath","WsFedLogout","ClientRedirectToPath","ClientRedirectToSignInPage","ClientRedirectToHome","url","search","hash","href","WsFedLogin","LOGIN_ROUTE","replace","GetAccessDeniedRoute","originalPath","ACCESS_DENIED_ROUTE","ClientRedirectToAccessDeniedPage","redirectUri","userManager","signinRedirect","RemoveSecurityTokenQuery","params","URLSearchParams","has","delete","pathname","fetch","CMS_URL","GetCredentialsForSecurityToken","securityToken","response","method","headers","Accept","body","JSON","stringify","encodeURIComponent","ok","parseError","json","LogonResult","ApplicationData","data","item","Key","Value","undefined","status","statusText","withCookies","cookieHelper","userError","groupsError","groupsResult","security","users","getCurrent","getUserGroups","userId","includeInherited","pageOptions","pageSize","items","groups","log","loginSagas","takeEvery","LOGIN_USER","loginUserSaga","LOGOUT_USER","logoutUserSaga","VALIDATE_USER","validateUserSaga","SET_AUTHENTICATION_STATE","redirectAfterSuccessfulLoginSaga","handleRequiresLoginSaga","action","_entry$sys","entry","path","requireLogin","routes","staticRoute","userLoggedIn","select","selectUserIsAuthenticated","currentQs","queryParams","selectCurrentSearch","securitytoken","authRoute","route","authContentType","sys","routeRequiresGroups","Array","isArray","routeRequiresLogin","call","put","type","userGroups","selectUserGroups","groupMatch","matchUserGroup","login","isLoading","removeHostnamePart","relativePath","split","splice","join","isLoggedIn","ReturnURL","assetRedirectPath","setRoute","refreshSecurityToken","selectClientCredentials","Object","authenticate","loginUser","logoutUser","registerUser","mappers","REGISTER_USER","requestPasswordReset","userEmailObject","REQUEST_USER_PASSWORD_RESET","resetPassword","resetPasswordObject","RESET_USER_PASSWORD","changePassword","currentPassword","newPassword","CHANGE_USER_PASSWORD","useLogin","CookieHelper","useCookies","dispatch","useDispatch","useSelector","selectUserErrorMessage","selectUserIsAuthenticationError","selectUserIsError","selectUserIsLoading","selectUser","authenticationError","authenticationErrorMessage","LoginContainer","children","props","userProps","propTypes","toJS","useRegistration","selectUserRegistrationError","selectUserRegistrationIsLoading","isSuccess","selectUserRegistrationIsSuccess","selectUserRegistration","RegistrationContainer","useForgotPassword","selectPasswordResetRequestSending","selectPasswordResetRequestSent","selectPasswordResetRequestError","setNewPassword","queryString","selectResetPasswordSending","selectResetPasswordSent","selectResetPasswordError","submit","ForgotPasswordContainer","useChangePassword","selectChangePasswordSending","selectChangePasswordSent","selectUserGuid","selectChangePasswordError","ChangePasswordContainer"],"mappings":"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"}